{
    "version": "https://jsonfeed.org/version/1",
    "title": "LKH的网站 • All posts by \"编程\" category",
    "description": "一个年轻程序猿的主页，包含了很多东西......",
    "home_page_url": "https://lkhsss.github.io",
    "items": [
        {
            "id": "https://lkhsss.github.io/2023/02/19/Go-Go%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84/",
            "url": "https://lkhsss.github.io/2023/02/19/Go-Go%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84/",
            "title": "Go语言结构",
            "date_published": "2023-02-19T08:38:27.000Z",
            "content_html": "<h2 id=\"语言结构\">语言结构</h2>\n<p>Go的语言结构分为</p>\n<ul>\n<li><a href=\"#%E5%8C%85%E5%A3%B0%E6%98%8E\">包声明</a></li>\n<li><a href=\"#%E5%BC%95%E5%85%A5%E5%8C%85\">引入包</a></li>\n<li><a href=\"#%E5%87%BD%E6%95%B0\">函数</a></li>\n<li><a href=\"#%E5%8F%98%E9%87%8F\">变量</a></li>\n<li><a href=\"#%E8%AF%AD%E5%8F%A5\">语句</a></li>\n<li><a href=\"#%E6%B3%A8%E9%87%8A\">注释</a></li>\n</ul>\n<p>既然是学习语言结构，那么还是用最简单的<a href=\"/2023/02/19/Go-Go-HelloWorld/\" title=\"Go: Hello World!\">HelloWorld</a>演示好了</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main &#x2F;* 包声明 *&#x2F;\n\nimport &quot;fmt&quot; &#x2F;* 引入包 *&#x2F;\n\nfunc main() &#123;\n   &#x2F;* 这是我的第一个简单的程序 *&#x2F;\n   fmt.Println(&quot;Hello, World!&quot;)&#x2F;&#x2F;基本的输出语句，将自动换行\n   &#x2F;&#x2F;这是一条单行注释\n   &#x2F;* 这是\n   一条\n   多行\n   注释\n   *&#x2F;\n&#125;</code></pre></div></figure>\n<h3 id=\"包声明\">包声明</h3>\n<p><code>package main</code>定义了包名。一个Go程序必须在源文件中非注释的第一行指明这个文件属于哪个包。</p>\n<div class=\"note note-warning\">\n            <p>package main表示一个可独立执行的程序，<strong>每个 Go 应用程序都包含一个名为 <code>main</code> 的包</strong>。</p>\n          </div>\n<div class=\"note note-warning\">\n            <p>注意：</p><ul><li>文件名与包名没有直接关系，不一定要将文件名与包名定成同一个</li><li>文件夹名与包名没有直接关系，并非需要一致</li><li>同一个文件夹下的文件只能有一个包名，否则编译报错。<span class=\"label label-danger\">package command-line-arguments is not a main package</span></li></ul>\n          </div>\n<h3 id=\"引入包\">引入包</h3>\n<p><code>import &quot;fmt&quot;</code> 告诉 Go 编译器这个程序需要使用 <code>fmt</code> 包（的函数，或其他元素），<code>fmt</code> 包实现了基本的格式化 I/O（输入/输出）</p>\n<div class=\"note note-success\">\n            <p>约等于Python中的<code>print()</code>函数</p>\n          </div>\n<h3 id=\"函数\">函数</h3>\n<p><code>func</code>是Go语言定义函数的方法。</p>\n<div class=\"note note-success\">\n            <p>约等于Python中的<code>def main():</code></p>\n          </div>\n<p><code>func main()</code> 是程序开始执行的函数。<code>main()</code> 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数</p>\n<div class=\"note note-info\">\n            <p>如果有 <code>init()</code> 函数则会先执行该函数。</p>\n          </div>\n<h3 id=\"变量\">变量</h3>\n<p>与其他语言相通</p>\n<div class=\"note note-danger\">\n            <p>但需要注意的是：当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 protected ）。</p>\n          </div>\n<h3 id=\"语句\">语句</h3>\n<p><code>fmt.Println()</code> 可以将字符串输出到控制台，并在最后自动增加换行字符 \\n。<br>\n使用 <code>fmt.Print(&quot;hello, world\\n&quot;)</code> 可以得到相同的结果。<br>\n<code>Print</code> 和 <code>Println</code> 这两个函数也支持使用变量，如：<code>fmt.Println(arr)</code> 。如果没有特别指定，它们会以默认的打印格式将变量 <code>arr</code> 输出到控制台。</p>\n<h3 id=\"注释\">注释</h3>\n<p>使用以 <code>//</code> 开头的单行注释，而<code>/*...*/</code> 是多行注释，这点与C和C艹是相似的。</p>\n",
            "tags": [
                "Go",
                "学习笔记"
            ]
        },
        {
            "id": "https://lkhsss.github.io/2023/02/19/Go-Go-HelloWorld/",
            "url": "https://lkhsss.github.io/2023/02/19/Go-Go-HelloWorld/",
            "title": "Go: Hello World!",
            "date_published": "2023-02-19T08:17:10.000Z",
            "content_html": "<h2 id=\"Go语言环境搭建\">Go语言环境搭建</h2>\n<p>官方下载地址：<a href=\"https://golang.org/dl/\">https://golang.org/dl/</a></p>\n<p>镜像站：<a href=\"https://golang.google.cn/dl/\">https://golang.google.cn/dl/</a></p>\n<hr>\n<h2 id=\"Hello-World\">Hello World!</h2>\n<p>学习一门语言的第一步，那必定是去copy一份经典的HelloWorld啦 :)</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n   &#x2F;* 这是我的第一个简单的程序 *&#x2F;\n   fmt.Println(&quot;Hello, World!&quot;)\n&#125;</code></pre></div></figure>\n<p>随便创建一个文件，修改后缀为<code>.go</code>，直接把上面的代码copy进去。</p>\n<p>作为第一个程序，我理所当然地取名为<code>helloworld.go</code></p>\n<p>保存后直接一顿操作在<strong>当前目录</strong>打开终端，输入：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go run test.go</code></pre></div></figure>\n<p>如果成功的话，会输出：</p>\n<span class=\"label label-success\">成功</span>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">D:\\Go&gt;go run test.go\nHello, World!</code></pre></div></figure>\n<div class=\"note note-info\">\n            <p><span class=\"label label-danger\">失败</span></p><p>如果显示<code>'go'不是内部或外部命令，也不是可运行的程序或批处理文件。</code>，那应当为Go语言添加系统环境，或这重新安装。</p>\n          </div>\n",
            "tags": [
                "Go",
                "学习笔记"
            ]
        },
        {
            "id": "https://lkhsss.github.io/2023/02/18/Hexo-Hexo-fluid%E4%B8%BB%E9%A2%98Tag%E6%8F%92%E4%BB%B6/",
            "url": "https://lkhsss.github.io/2023/02/18/Hexo-Hexo-fluid%E4%B8%BB%E9%A2%98Tag%E6%8F%92%E4%BB%B6/",
            "title": "Hexo-fluid主题Tag插件",
            "date_published": "2023-02-18T02:45:29.000Z",
            "content_html": "<p>Hexo fluid主题的Tag插件，在此整理记录，方便取用<br>\n官网：<a href=\"https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6\">配置指南 | Hexo Fluid 用户手册 | Tag 插件</a></p>\n<h2 id=\"便签\">便签</h2>\n<h3 id=\"紫色\">紫色</h3>\n<div class=\"note note-primary\">\n            <p>primary</p>\n          </div>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">&#123;% note primary %&#125;\nprimary\n&#123;% endnote %&#125;</code></pre></div></figure>\n<h3 id=\"灰色\">灰色</h3>\n<div class=\"note note-secondary\">\n            <p>secondary</p>\n          </div>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">&#123;% note secondary %&#125;\nsecondary\n&#123;% endnote %&#125;</code></pre></div></figure>\n<h3 id=\"绿色\">绿色</h3>\n<div class=\"note note-success\">\n            <p>success</p>\n          </div>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">&#123;% note success %&#125;\nsuccess\n&#123;% endnote %&#125;</code></pre></div></figure>\n<h3 id=\"红色\">红色</h3>\n<div class=\"note note-danger\">\n            <p>danger</p>\n          </div>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">&#123;% note danger %&#125;\ndanger\n&#123;% endnote %&#125;</code></pre></div></figure>\n<h3 id=\"黄色\">黄色</h3>\n<div class=\"note note-warning\">\n            <p>warning</p>\n          </div>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">&#123;% note warning %&#125;\nwarning\n&#123;% endnote %&#125;</code></pre></div></figure>\n<h3 id=\"蓝色\">蓝色</h3>\n<div class=\"note note-info\">\n            <p>info</p>\n          </div>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">&#123;% note info %&#125;\ninfo\n&#123;% endnote %&#125;</code></pre></div></figure>\n<h3 id=\"黑色\">黑色</h3>\n<div class=\"note note-light\">\n            <p>light</p>\n          </div>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">&#123;% note light %&#125;\nlight\n&#123;% endnote %&#125;</code></pre></div></figure>\n<hr>\n<h2 id=\"行内标签\">行内标签</h2>\n<span class=\"label label-primary\">primary</span>\n<span class=\"label label-default\">default</span>\n<span class=\"label label-info\">info</span>\n<span class=\"label label-success\">success</span>\n<span class=\"label label-warning\">warning</span>\n<span class=\"label label-danger\">danger</span>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">&#123;% label primary @primary %&#125;\n&#123;% label default @default %&#125;\n&#123;% label info @info %&#125;\n&#123;% label success @success %&#125;\n&#123;% label warning @warning %&#125;\n&#123;% label danger @danger %&#125;</code></pre></div></figure>\n<h2 id=\"勾选框\">勾选框</h2>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">&#123;% cb text, checked?, incline? %&#125;</code></pre></div></figure>\n<div>\n            <input type=\"checkbox\" disabled checked=\"checked\">勾选\n          </div>\n<div>\n            <input type=\"checkbox\" disabled >不勾选\n          </div>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">&#123;% cb 勾选, true, false%&#125;\n&#123;% cb 不勾选, false, false%&#125;</code></pre></div></figure>\n<h2 id=\"按钮\">按钮</h2>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">&#123;% btn 链接, 显示文本, 鼠标悬浮文字 %&#125;</code></pre></div></figure>\n<a class=\"btn\" href=\"链接\"  title=\"悬浮文字\" target=\"_blank\">显示文本</a>\n<h2 id=\"组图\">组图</h2>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">&#123;% gi total n1-n2-... %&#125;\n  ![](url)\n  ![](url)\n  ![](url)\n  ![](url)\n  ![](url)\n&#123;% endgi %&#125;</code></pre></div></figure>\n<div class=\"note note-info\">\n            <p>total：图片总数量，对应中间包含的图片 url 数量<br>n1-n2-…：每行的图片数量，可以省略，默认单行最多 3 张图，求和必须相等于 total，否则按默认样式</p>\n          </div>\n",
            "tags": [
                "Hexo"
            ]
        },
        {
            "id": "https://lkhsss.github.io/2023/01/02/Hexo-LaTex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E9%80%9F%E6%9F%A5%E8%A1%A8/",
            "url": "https://lkhsss.github.io/2023/01/02/Hexo-LaTex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E9%80%9F%E6%9F%A5%E8%A1%A8/",
            "title": "LaTex 数学公式速查表",
            "date_published": "2023-01-02T03:53:06.000Z",
            "content_html": "<h2 id=\"分数\">分数</h2>\n<p><code>$\\frac&#123;分子&#125;&#123;分母&#125;$</code></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mtext>分子</mtext><mtext>分母</mtext></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{分子}{分母}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2173em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8723em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord cjk_fallback mtight\">分母</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord cjk_fallback mtight\">分子</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></p>\n<h2 id=\"派\">派</h2>\n<p><code>$\\pi$</code></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span></p>\n<h2 id=\"希腊字母\">希腊字母</h2>\n<p><code>$\\alpha$</code></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span></p>\n<h2 id=\"角度\">角度</h2>\n<p><code>$^\\circ$</code></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow></mrow><mo>∘</mo></msup></mrow><annotation encoding=\"application/x-tex\">^\\circ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6741em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6741em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∘</span></span></span></span></span></span></span></span></span></span></span></p>\n",
            "tags": [
                "Hexo",
                "LaTex"
            ]
        },
        {
            "id": "https://lkhsss.github.io/2022/12/13/Java-Java%E5%85%A5%E9%97%A8/",
            "url": "https://lkhsss.github.io/2022/12/13/Java-Java%E5%85%A5%E9%97%A8/",
            "title": "Java入门",
            "date_published": "2022-12-12T16:32:49.000Z",
            "content_html": "<h1>万事开头难，先写一个 HelloWorld</h1>\n<p>从网上 copy 了一个最简单的 java 程序下来，体会 java 的基础语法</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class HelloWorld &#123;\n    &#x2F;* 第一个Java程序\n     * 它将输出字符串 Hello World\n     *&#x2F;\n    public static void main(String[] args) &#123;\n        System.out.println(&quot;Hello World&quot;); &#x2F;&#x2F; 输出 Hello World\n    &#125;\n&#125;</code></pre></div></figure>\n<hr>\n<h2 id=\"运行步骤\">运行步骤</h2>\n<ul>\n<li>保存为文件**<code>HelloWorld.java</code>**</li>\n</ul>\n<blockquote>\n<p>注意，文件名一定要是<code>HelloWorld.java</code>! 不然会有奇怪的事情发生哦（<a href=\"#public%E7%B1%BB\">Why?</a>）</p>\n</blockquote>\n<ul>\n<li>\n<p>在<strong>该文件目录下</strong>分别运行<code>javac HelloWorld.java</code>和<code>java HelloWorld</code>进行编译和运行</p>\n</li>\n<li>\n<p>也可以直接输入<code>java HelloWorld.java</code>进行运行（Java 11 新增功能，单个文件直接运行）</p>\n</li>\n</ul>\n<h2 id=\"完整输出过程\">完整输出过程</h2>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lkhsss@LKH-PC:&#x2F;mnt&#x2F;d&#x2F;Java$ javac HelloWorld.java\nlkhsss@LKH-PC:&#x2F;mnt&#x2F;d&#x2F;Java$ java HelloWorld\nHello World</code></pre></div></figure>\n<p>或者直接</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lkhsss@LKH-PC:&#x2F;mnt&#x2F;d&#x2F;Java$ java HelloWorld.java\nHello World</code></pre></div></figure>\n<hr>\n<h1>语法解析</h1>\n<h2 id=\"类\">类</h2>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class HelloWorld &#123;&#125;</code></pre></div></figure>\n<p>这玩意儿叫做 java 的类(class)。其中<code>public</code>表示这个类公开，而<code>HelloWorld</code>则为这个类的类名。</p>\n<h3 id=\"public-类\">public 类</h3>\n<p>在 java 程序当中，可以同时出现很多个类，但有且仅有一个类是<code>public</code>并且这个<code>public</code>类的名字<strong>必须和文件名相同</strong>。</p>\n<p>因为每一个 java 程序运行的时候都会先执行 public 这个类（类似于 Python 中的<code>__init__</code>）。</p>\n<h3 id=\"多个类\">多个类</h3>\n<p>也可以多个类，然后相互调用</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class HelloWorld &#123;\n    &#x2F;* 第一个Java程序\n     * 它将输出字符串 Hello World\n     *&#x2F;\n    public static void main(String[] args) &#123;\n        System.out.println(&quot;Hello World&quot;); &#x2F;&#x2F; 输出 Hello World\n        about a&#x3D;new about(); &#x2F;&#x2F;创建一个about类\n        a.sayabout(); &#x2F;&#x2F;调用about类中的sayabout()方法\n\n    &#125;\n&#125;\nclass about &#123;\n    void sayabout() &#123;\n        System.out.println(&quot;现在我正在学习java&quot;);\n    &#125;\n&#125;</code></pre></div></figure>\n<p>输出：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lkhsss@LKH-PC:&#x2F;mnt&#x2F;d&#x2F;Java$ java HelloWorld.java\nHello World\n现在我正在学习java</code></pre></div></figure>\n<h2 id=\"方法\">方法</h2>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;&#125;</code></pre></div></figure>\n<p>这个玩意儿叫做 java 的方法。</p>\n<p>类似于其他编程语言的<strong>函数</strong>。</p>\n<p>将一段可重复运行的代码绑在一起调用，简化代码，提高代码的可读性，可维护性，可重用性，安全性。</p>\n<h3 id=\"修饰符\">修饰符</h3>\n<p>java 方法的首个属性就是<strong>访问修饰符</strong>。</p>\n<p>访问修饰符分为 公有的(public)，默认的(default)，私有的(private)，受保护的(protected) 和 私有的(private)。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">修饰符</th>\n<th style=\"text-align:center\">区别</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">public</td>\n<td style=\"text-align:center\">可以被所有其他类所访问</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">default</td>\n<td style=\"text-align:center\">同一包中的类可以访问，声明时没有加修饰符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">protected</td>\n<td style=\"text-align:center\">自身，子类及同一个包中类可以访问。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">private</td>\n<td style=\"text-align:center\">只能被自己访问和修改</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"输出\">输出</h2>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">System.out.println(&quot;Hello World&quot;);</code></pre></div></figure>\n<p>只是输出一个 Hello World 而已</p>\n",
            "tags": [
                "编程",
                "Java",
                "学习"
            ]
        },
        {
            "id": "https://lkhsss.github.io/2022/12/10/Python-%E5%BA%93-click/",
            "url": "https://lkhsss.github.io/2022/12/10/Python-%E5%BA%93-click/",
            "title": "python-Click库",
            "date_published": "2022-12-10T02:20:24.000Z",
            "content_html": "<h1>Click</h1>\n<p>Click全名<em>Command Line Interface Creation Kit</em>，是一个用于构建命令行的第三方库，相较于Python自带的<a href=\"https://docs.python.org/zh-cn/3/library/argparse.html\">Argparse</a>更加友好和易用。</p>\n<hr>\n<p>官方文档：<a href=\"https://palletsprojects.com/p/click/\">Click | The Pallets Projects</a></p>\n<p>PyPI：<a href=\"https://pypi.org/project/click/\">Click · PyPI</a></p>\n<hr>\n<h2 id=\"安装\">安装</h2>\n<p><code>pip install click</code></p>\n<hr>\n<h2 id=\"用法\">用法</h2>\n<p>引用库<code>import click</code></p>\n<h3 id=\"click-command\">@click.command()</h3>\n<p>使用<code>@click.command()</code>修饰想要构建为命令行命令的函数</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#39;&#39;&#39;\nfilename: test.py\n&#39;&#39;&#39;\nimport click\n\n@click.command()  # 为函数&#96;test()&#96;添加修饰器\ndef test():\n    click.echo(&quot;测试函数，没有什么卵用&quot;)\n\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;:\n    test()</code></pre></div></figure>\n<p>添加后和没有加没有任何不同，因为没有使用<code>@click.option()</code>进行命令行选项的进一步设置</p>\n<p>使用<code>click.echo()</code>是为了更好的终端兼容性</p>\n<h3 id=\"click-option\">@click.option()</h3>\n<p>使用<code>@click.option()</code>增加修饰选项</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#39;&#39;&#39;\nfilename: test.py\n&#39;&#39;&#39;\nimport click\n\n@click.command()  # 为函数&#96;test()&#96;添加修饰器\n@click.option(\n    &quot;-n&quot;,\n    &quot;--name&quot;,\n    prompt&#x3D;&quot;请输入你的名字&quot;,\n    default&#x3D;&quot;无名氏&quot;,\n    help&#x3D;&quot;你的名字。默认值为“无名氏”&quot;,\n    type&#x3D;str,\n) # 设置参数\ndef test(name):\n    click.echo((&quot;你输入的名字为：&#123;&#125;&quot;).format(name)) #输出\n\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;: # 程序入口\n    test()</code></pre></div></figure>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lkhsss@LKH-PC:~$ python test.py -n LKH\n你输入的名字为：LKH\n\nlkhsss@LKH-PC:~$ python test.py\n请输入你的名字 [无名氏]: LKH\n你输入的名字为：LKH</code></pre></div></figure>\n<ul>\n<li>\n<p><code>@click.option()</code>接受一种参数多种名字，上例的<code>-n</code>和<code>--name</code>都指向了一个函数</p>\n</li>\n<li>\n<p>使用<code>prompt</code>指定必须要求输入的参数在没有传入时显示的提示</p>\n<ul>\n<li>\n<blockquote>\n<p>当使用了<code>prompt</code>时，click会认为该参数为必须项，会主动询问参数的值</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>使用<code>help</code>指定该参数的帮助信息</p>\n</li>\n<li>\n<p>使用<code>type</code>指定传入数据的类型</p>\n<ul>\n<li>使用<code>type=click.Choice['A','B']</code>限制该参数只能从A和B中选择</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"菜单选项\">菜单选项</h3>\n<p>配置好参数后，click自动为我们准备了<code>--help</code>选项，其中包含了我们在<code>help</code>中加入的帮助信息</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lkhsss@LKH-PC:~$ python test.py --help\nUsage: test.py [OPTIONS]\n\nOptions:\n  -n, --name TEXT  你的名字。默认值为“无名氏”\n  --help           Show this message and exit.</code></pre></div></figure>\n<hr>\n<h2 id=\"示例\">示例</h2>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#39;&#39;&#39;\nfilename: test.py\nauthor: Lkhsss\n&#39;&#39;&#39;\nimport click\n\n@click.command()  # 为函数&#96;test()&#96;添加修饰器\n@click.option(\n    &quot;-n&quot;,\n    &quot;--name&quot;,\n    prompt&#x3D;&quot;请输入你的名字&quot;,\n    default&#x3D;&quot;无名氏&quot;,\n    help&#x3D;&quot;你的名字，传入参数后将显示在输出中。默认值为“无名氏”&quot;,\n    type&#x3D;str,\n)\n# 选择可以传入&#96;test()&#96;的参数\n# 可以使用多个参数名，输入&quot;-n&quot;，&quot;--name&quot;都会指向&#96;test()&#96;函数\n# 使用default参数设置参数默认值\n# 使用help参数设置帮助菜单\n@click.option(\n    &quot;-c&quot;,\n    &quot;--count&quot;,\n    prompt&#x3D;&quot;请输入循环次数&quot;,\n    default&#x3D;&quot;1&quot;,\n    help&#x3D;&quot;显示名字次数，默认值为1&quot;,\n    type&#x3D;int\n)\ndef test(name, count):\n    for i in range(count):\n        click.echo((&quot;&#123;&#125;，你好。&quot;).format(name))\n    click.echo(&quot;这是一个示例函数，可以输出你在命令行中输入的名字，用来测试click库&quot;)\n\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;:\n    test()</code></pre></div></figure>\n",
            "tags": [
                "编程",
                "Python"
            ]
        },
        {
            "id": "https://lkhsss.github.io/2022/11/06/Html-container-element/",
            "url": "https://lkhsss.github.io/2022/11/06/Html-container-element/",
            "title": "HTML-容器元素",
            "date_published": "2022-11-06T03:52:22.000Z",
            "content_html": "<h1>容器元素</h1>\n<p>HTML 学习 - 容器元素</p>\n<span id=\"more\"></span>\n<h2 id=\"div-元素\">div 元素</h2>\n<p>作用：分割网页，达到不同区域实现不同样式，不同功能，应用广泛</p>\n<blockquote>\n<p>注：div 标签没有任何语义</p>\n</blockquote>\n<h2 id=\"其他容器元素\">其他容器元素</h2>\n<p>在 html5 中，为了解决语义化的问题，方便搜索引擎和浏览器识别网页内容，引入了许多有语义的容器标签</p>\n<h3 id=\"header元素\">- <code>header</code>元素</h3>\n<p>通常用于表示页头；有时也可以表示文章的头部。<br>\n例：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;header&gt;&lt;&#x2F;header&gt;</code></pre></div></figure>\n<h3 id=\"footer元素\">- <code>footer</code>元素</h3>\n<p>通常用于表示页脚；有时也可以表示文章的尾部。<br>\n例：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;footer&gt;&lt;&#x2F;footer&gt;</code></pre></div></figure>\n<h3 id=\"article元素\">- <code>article</code>元素</h3>\n<p>通常用于表示整篇文章<br>\n例：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;article&gt;\n  &lt;header&gt;页头&lt;&#x2F;header&gt;\n  &lt;p&gt;正文&lt;&#x2F;p&gt;\n  &lt;footer&gt;页尾&lt;&#x2F;footer&gt;\n&lt;&#x2F;article&gt;</code></pre></div></figure>\n<blockquote>\n<p>注：<code>article</code>, <code>header</code>和<code>footer</code>与<code>div</code>在本质上没有区别，只是它们有语义，方便语义化</p>\n</blockquote>\n<h3 id=\"section元素\">- <code>section</code>元素</h3>\n<p>通常表示文章的章节<br>\n例：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;section&gt;\n  &lt;h2&gt;第一章&lt;&#x2F;h2&gt;\n  &lt;p&gt;第一章内容&lt;&#x2F;p&gt;\n&lt;&#x2F;section&gt;\n\n&lt;section&gt;\n  &lt;h2&gt;第二章&lt;&#x2F;h2&gt;\n  &lt;p&gt;第二章内容&lt;&#x2F;p&gt;\n&lt;&#x2F;section&gt;</code></pre></div></figure>\n<h3 id=\"aside元素\">- <code>aside</code>元素</h3>\n<p>通常表示附加信息<br>\n例：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;aside&gt;\n  &lt;p&gt;侧边栏信息&lt;&#x2F;p&gt;\n&lt;&#x2F;aside&gt;</code></pre></div></figure>\n<h3 id=\"nav元素\">- <code>nav</code>元素</h3>\n<p>导航元素<br>\n例：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;nav&gt;\n  &lt;p&gt;百度&lt;&#x2F;p&gt;\n  &lt;p&gt;谷歌&lt;&#x2F;p&gt;\n  &lt;p&gt;必应&lt;&#x2F;p&gt;\n&lt;&#x2F;nav&gt;</code></pre></div></figure>\n",
            "tags": [
                "Html",
                "编程"
            ]
        }
    ]
}