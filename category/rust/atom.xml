<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lkhsss.github.io</id>
    <title>LKHSSS的Blog • Posts by &#34;rust&#34; category</title>
    <link href="https://lkhsss.github.io" />
    <updated>2024-08-20T16:15:31.000Z</updated>
    <category term="Html" />
    <category term="编程" />
    <category term="Hexo" />
    <category term="LaTex" />
    <category term="Python" />
    <category term="学习笔记" />
    <category term="Rust" />
    <category term="解决方案" />
    <category term="iced" />
    <category term="Go" />
    <category term="学习目录" />
    <category term="高中" />
    <category term="物理" />
    <category term="公式" />
    <category term="总结" />
    <category term="数据库" />
    <category term="MySQL" />
    <category term="化学" />
    <category term="内卷笔记" />
    <category term="数学" />
    <category term="计算机" />
    <category term="汇编" />
    <category term="Linux" />
    <category term="Kali" />
    <category term="树莓派" />
    <category term="WSL" />
    <entry>
        <id>https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Rust/%E4%BC%98%E9%9B%85%E5%9C%B0%E4%B8%BAiced%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0%E5%9B%BE%E6%A0%87/</id>
        <title>优雅地为iced应用程序添加图标</title>
        <link rel="alternate" href="https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Rust/%E4%BC%98%E9%9B%85%E5%9C%B0%E4%B8%BAiced%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0%E5%9B%BE%E6%A0%87/"/>
        <content type="html">&lt;h1&gt;设置图标&lt;/h1&gt;
&lt;p&gt;图标分为两种。&lt;/p&gt;
&lt;p&gt;一种是显示在应用左上角异界任务栏上的图标。&lt;/p&gt;
&lt;p&gt;一种是系统读取文件时显示的图标（本文方法仅适用于Windows）。&lt;/p&gt;
&lt;p&gt;首先准备好一个符合windows规范的icon文件（本文以&lt;code&gt;icon.ico&lt;/code&gt;为例），放在根目录中&lt;/p&gt;
&lt;h2 id=&#34;在iced中设置应用内和任务栏图标&#34;&gt;在iced中设置应用内和任务栏图标&lt;/h2&gt;
&lt;p&gt;其他人多使用&lt;code&gt;icon::from_rgba()&lt;/code&gt;方法，配合&lt;code&gt;image&lt;/code&gt;库读取图片来为程序添加图标，但其实iced为大家提供了&lt;code&gt;image&lt;/code&gt;feature来直接一步到位。&lt;br&gt;
使用以下命令启用iced的&lt;code&gt;image&lt;/code&gt;feature:&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo add iced -F image&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;然后直接设置一手&lt;code&gt;iced::window::icon::from_file_data()&lt;/code&gt;,然后用&lt;code&gt;include_bytes&lt;/code&gt;宏直接读取图片数据，然后设置&lt;code&gt;window&lt;/code&gt;的设置&lt;code&gt;icon&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图片不能是矢量图(&lt;code&gt;.svg&lt;/code&gt;)，但是位图(&lt;code&gt;.png&lt;/code&gt;,&lt;code&gt;.jpg&lt;/code&gt;,&lt;code&gt;.ico&lt;/code&gt;…)应该都可以。&lt;br&gt;
图片的位置时相对于&lt;code&gt;main.rs&lt;/code&gt;文件的。所以当icon文件放在项目根目录时，相对路径应为&lt;code&gt;../icon.png&lt;/code&gt;&lt;br&gt;
同时``iced::window::icon&lt;code&gt;还有一个&lt;/code&gt;from_file&lt;code&gt;方法，可以动态读取图标。而&lt;/code&gt;from_file_data`主要是为了在编译时就硬编码好图标。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;设置代码如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre class=&#34;line-numbers language-rust&#34; data-language=&#34;rust&#34;&gt;&lt;code class=&#34;language-rust&#34;&gt;use iced::window::&amp;#123;icon, Icon&amp;#125;;
fn main() -&amp;gt; iced::Result &amp;#123;
    App::run(Settings&amp;#123;
        window:iced::window::Settings&amp;#123;
    		icon:Some(Icon::from(icon::from_file_data(include_bytes!(&amp;quot;..&amp;#x2F;icon.png&amp;quot;),None).unwrap())),
    		..Default::default()
		&amp;#125;,
	..Default::default()
    	&amp;#125;)
&amp;#125;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2 id=&#34;设置程序文件图标&#34;&gt;设置程序文件图标&lt;/h2&gt;
&lt;h3 id=&#34;首先添加编译脚本依赖&#34;&gt;首先添加编译脚本依赖&lt;/h3&gt;
&lt;p&gt;以下是&lt;code&gt;Cargo.toml&lt;/code&gt;的内容&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre class=&#34;line-numbers language-toml&#34; data-language=&#34;toml&#34;&gt;&lt;code class=&#34;language-toml&#34;&gt;[package]
build &amp;#x3D; &amp;quot;src&amp;#x2F;build.rs&amp;quot;
[build-dependencies]
winres &amp;#x3D; &amp;quot;*&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;然后在src文件夹中添加一个叫&lt;code&gt;build.rs&lt;/code&gt;文件&lt;br&gt;
文件内容如下&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre class=&#34;line-numbers language-rust&#34; data-language=&#34;rust&#34;&gt;&lt;code class=&#34;language-rust&#34;&gt;use winres;

fn main() &amp;#123;
    let mut res &amp;#x3D; winres::WindowsResource::new();
    res.set_icon(&amp;quot;icon.ico&amp;quot;);
    res.compile().unwrap();
&amp;#125;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;winres的图片相对路径是项目根目录，所以&lt;code&gt;icon.ico&lt;/code&gt;即可。&lt;br&gt;
还可以在&lt;code&gt;Cargo.toml&lt;/code&gt;中使用&lt;code&gt;[package.metadata.winres]&lt;/code&gt;来设置应用的信息。具体请看&lt;a href=&#34;https://learn.microsoft.com/zh-cn/windows/win32/menurc/versioninfo-resource?redirectedfrom=MSDN&#34;&gt;MSDN&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;最后一步！&#34;&gt;最后一步！&lt;/h3&gt;
&lt;p&gt;熟悉的构建环节！&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre class=&#34;line-numbers language-rust&#34; data-language=&#34;rust&#34;&gt;&lt;code class=&#34;language-rust&#34;&gt;cargo build -r&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
</content>
        <category term="Rust" />
        <category term="iced" />
        <updated>2024-08-20T16:15:31.000Z</updated>
    </entry>
    <entry>
        <id>https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Rust/rust-%E4%BD%BF%E7%94%A8config%E9%85%8D%E7%BD%AE%E7%A8%8B%E5%BA%8F/</id>
        <title>Rust-使用config配置程序</title>
        <link rel="alternate" href="https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Rust/rust-%E4%BD%BF%E7%94%A8config%E9%85%8D%E7%BD%AE%E7%A8%8B%E5%BA%8F/"/>
        <content type="html">&lt;p&gt;在应用开发中，我们通常会将一些可变项放到配置文件中。&lt;/p&gt;
&lt;p&gt;此次将使用&lt;code&gt;config&lt;/code&gt;来进行配置项的读取。&lt;/p&gt;
&lt;h2 id=&#34;安装依赖项&#34;&gt;安装依赖项&lt;/h2&gt;
&lt;p&gt;config提供api，去一个字段一个字段的读取配置。但是有一种更高级地方法，那就是声明一个struct，然后config帮我们进行反序列化处理，如果字段有错，会直接报错&lt;code&gt;config::ConfigError&lt;/code&gt;。此方法更安全，更rust，代码脉络也更强。、&lt;/p&gt;
&lt;p&gt;因为要反序列化，所以要为struct启用&lt;code&gt;Deserialize&lt;/code&gt;的trait。故而还要引用serde，并启用&lt;code&gt;derive&lt;/code&gt;特性。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre class=&#34;line-numbers language-toml&#34; data-language=&#34;toml&#34;&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]
config &amp;#x3D; &amp;quot;0.14.0&amp;quot;
serde &amp;#x3D; &amp;#123; version &amp;#x3D; &amp;quot;1.0.196&amp;quot;, features &amp;#x3D; [&amp;quot;derive&amp;quot;] &amp;#125;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;或者使用：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo add config serde -F serde&amp;#x2F;derive&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2 id=&#34;声明配置struct&#34;&gt;声明配置struct&lt;/h2&gt;
&lt;p&gt;此处的结构体为一个典型示例&lt;/p&gt;
&lt;p&gt;&lt;code&gt;src/main.rs&lt;/code&gt;&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre class=&#34;line-numbers language-rust&#34; data-language=&#34;rust&#34;&gt;&lt;code class=&#34;language-rust&#34;&gt;use serde::Deserialize;

#[derive(Debug,Deserialize)]
pub struct AppConfig &amp;#123;
    address: String, &amp;#x2F;&amp;#x2F; 配置项地址
    port: u16, &amp;#x2F;&amp;#x2F; 配置项端口
    server_name: String, &amp;#x2F;&amp;#x2F; 配置项服务器名称
    database_url: String, &amp;#x2F;&amp;#x2F; 配置项数据库URL
    database_port: u16, &amp;#x2F;&amp;#x2F; 配置项数据库端口
    database_user: String, &amp;#x2F;&amp;#x2F; 配置项数据库用户名
    database_password: String, &amp;#x2F;&amp;#x2F; 配置项数据库密码
    debug: bool, &amp;#x2F;&amp;#x2F; 是否启用应用的调试(debug)模式
&amp;#125;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2 id=&#34;创建配置文件&#34;&gt;创建配置文件&lt;/h2&gt;
&lt;p&gt;在程序根目录下创建一个&lt;code&gt;toml&lt;/code&gt;文件。这里创建一个名为&lt;code&gt;config.toml&lt;/code&gt;的文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;config.toml&lt;/code&gt;&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre class=&#34;line-numbers language-toml&#34; data-language=&#34;toml&#34;&gt;&lt;code class=&#34;language-toml&#34;&gt;# 配置项地址
address&amp;#x3D;&amp;quot;0.0.0.0&amp;quot;
# 配置项端口
port&amp;#x3D;8080 
# 配置项服务器名称
server_name&amp;#x3D; &amp;quot;这是一个config库的demo&amp;quot;

#配置项数据库URL
database_url&amp;#x3D;&amp;quot;0.0.0.0&amp;quot;
# 配置项数据库端口
database_port&amp;#x3D;&amp;quot;7890&amp;quot;
# 配置项数据库用户名
database_user&amp;#x3D;&amp;quot;root&amp;quot;
# 配置项数据库密码
database_password&amp;#x3D;&amp;quot;ABCabc12345678&amp;quot;

# 是否启用应用的调试(debug)模式
debug&amp;#x3D;true &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2 id=&#34;读取配置文件&#34;&gt;读取配置文件&lt;/h2&gt;
&lt;figure&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre class=&#34;line-numbers language-rust&#34; data-language=&#34;rust&#34;&gt;&lt;code class=&#34;language-rust&#34;&gt;use config::&amp;#123;Config, File&amp;#125;;
fn main() &amp;#123;
    let config &amp;#x3D; Config::builder().add_source(File::with_name(&amp;quot;config.toml&amp;quot;)).build().expect(&amp;quot;读取配置文件错误&amp;quot;);;
    let app_config: AppConfig &amp;#x3D; config.try_deserialize().expect(&amp;quot;反序列化失败！&amp;quot;);
    println!(&amp;quot;&amp;#123;:#?&amp;#125;&amp;quot;, app_config); &amp;#x2F;&amp;#x2F; 输出配置信息
&amp;#125;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;输出如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;AppConfig &amp;#123;
    address: &amp;quot;0.0.0.0&amp;quot;,
    port: 8080,
    server_name: &amp;quot;这是一个config库的demo&amp;quot;,
    database_url: &amp;quot;0.0.0.0&amp;quot;,
    database_port: 7890,
    database_user: &amp;quot;root&amp;quot;,
    database_password: &amp;quot;ABCabc12345678&amp;quot;,
    debug: true,
&amp;#125;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;完整代码&lt;/h2&gt;
&lt;figure&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;├─src
│  └─main.rs
└─config.toml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;src/main.rs&lt;/code&gt;&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre class=&#34;line-numbers language-rust&#34; data-language=&#34;rust&#34;&gt;&lt;code class=&#34;language-rust&#34;&gt;use config::&amp;#123;Config, File&amp;#125;;
use serde::Deserialize;

#[derive(Debug,Deserialize)]
pub struct AppConfig &amp;#123;
    address: String, &amp;#x2F;&amp;#x2F; 配置项地址
    port: u16, &amp;#x2F;&amp;#x2F; 配置项端口
    server_name: String, &amp;#x2F;&amp;#x2F; 配置项服务器名称
    database_url: String, &amp;#x2F;&amp;#x2F; 配置项数据库URL
    database_port: u16, &amp;#x2F;&amp;#x2F; 配置项数据库端口
    database_user: String, &amp;#x2F;&amp;#x2F; 配置项数据库用户名
    database_password: String, &amp;#x2F;&amp;#x2F; 配置项数据库密码
    debug: bool, &amp;#x2F;&amp;#x2F; 是否启用应用的调试(debug)模式
&amp;#125;
fn main() &amp;#123;
    let config &amp;#x3D; Config::builder().add_source(File::with_name(&amp;quot;config.toml&amp;quot;)).build().expect(&amp;quot;读取配置文件错误&amp;quot;);
    let app_config: AppConfig &amp;#x3D; config.try_deserialize().expect(&amp;quot;反序列化失败！&amp;quot;);
    println!(&amp;quot;&amp;#123;:#?&amp;#125;&amp;quot;, app_config); &amp;#x2F;&amp;#x2F; 输出配置信息
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;config.toml&lt;/code&gt;&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre class=&#34;line-numbers language-toml&#34; data-language=&#34;toml&#34;&gt;&lt;code class=&#34;language-toml&#34;&gt;# 配置项地址
address&amp;#x3D;&amp;quot;0.0.0.0&amp;quot;
# 配置项端口
port&amp;#x3D;8080 
# 配置项服务器名称
server_name&amp;#x3D; &amp;quot;这是一个config库的demo&amp;quot;

#配置项数据库URL
database_url&amp;#x3D;&amp;quot;0.0.0.0&amp;quot;
# 配置项数据库端口
database_port&amp;#x3D;&amp;quot;7890&amp;quot;
# 配置项数据库用户名
database_user&amp;#x3D;&amp;quot;root&amp;quot;
# 配置项数据库密码
database_password&amp;#x3D;&amp;quot;ABCabc12345678&amp;quot;

# 是否启用应用的调试(debug)模式
debug&amp;#x3D;true &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
</content>
        <category term="编程" />
        <category term="Rust" />
        <updated>2024-02-16T03:33:38.000Z</updated>
    </entry>
    <entry>
        <id>https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Rust/rustup%E6%8D%A2%E6%BA%90/</id>
        <title>Rustup换源</title>
        <link rel="alternate" href="https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Rust/rustup%E6%8D%A2%E6%BA%90/"/>
        <content type="html">&lt;p&gt;由于rust的官方服务器在中国访问很慢，所以在安装和更新的时候经常出现下载时卡住的情况。&lt;br&gt;
这时应换源处理。&lt;/p&gt;
&lt;h2 id=&#34;换源&#34;&gt;换源&lt;/h2&gt;
&lt;h3 id=&#34;1-添加临时环境变量&#34;&gt;1.添加临时环境变量&lt;/h3&gt;
&lt;h4 id=&#34;Windows&#34;&gt;Windows&lt;/h4&gt;
&lt;h5 id=&#34;中科大镜像&#34;&gt;中科大镜像&lt;/h5&gt;
&lt;figure&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ENV:RUSTUP_DIST_SERVER&amp;#x3D;&amp;#39;https:&amp;#x2F;&amp;#x2F;mirrors.ustc.edu.cn&amp;#x2F;rust-static&amp;#39;
$ENV:RUSTUP_UPDATE_ROOT&amp;#x3D;&amp;#39;https:&amp;#x2F;&amp;#x2F;mirrors.ustc.edu.cn&amp;#x2F;rust-static&amp;#x2F;rustup&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre class=&#34;line-numbers language-cmd&#34; data-language=&#34;cmd&#34;&gt;&lt;code class=&#34;language-cmd&#34;&gt;set RUSTUP_DIST_SERVER&amp;#x3D;https:&amp;#x2F;&amp;#x2F;mirrors.ustc.edu.cn&amp;#x2F;rust-static
set RUSTUP_UPDATE_ROOT&amp;#x3D;https:&amp;#x2F;&amp;#x2F;mirrors.ustc.edu.cn&amp;#x2F;rust-static&amp;#x2F;rustup&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h5 id=&#34;字节跳动镜像&#34;&gt;字节跳动镜像&lt;/h5&gt;
&lt;figure&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ENV:RUSTUP_DIST_SERVER&amp;#x3D;&amp;#39;https:&amp;#x2F;&amp;#x2F;rsproxy.cn&amp;#39;
$ENV:RUSTUP_UPDATE_ROOT&amp;#x3D;&amp;#39;https:&amp;#x2F;&amp;#x2F;rsproxy.cn&amp;#x2F;rustup&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre class=&#34;line-numbers language-cmd&#34; data-language=&#34;cmd&#34;&gt;&lt;code class=&#34;language-cmd&#34;&gt;set RUSTUP_DIST_SERVER&amp;#x3D;https:&amp;#x2F;&amp;#x2F;rsproxy.cn
set RUSTUP_UPDATE_ROOT&amp;#x3D;https:&amp;#x2F;&amp;#x2F;rsproxy.cn&amp;#x2F;rustup&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;Linux&#34;&gt;Linux&lt;/h4&gt;
&lt;h5 id=&#34;中科大镜像-2&#34;&gt;中科大镜像&lt;/h5&gt;
&lt;figure&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;export RUSTUP_DIST_SERVER&amp;#x3D;https:&amp;#x2F;&amp;#x2F;mirrors.ustc.edu.cn&amp;#x2F;rust-static
export RUSTUP_UPDATE_ROOT&amp;#x3D;https:&amp;#x2F;&amp;#x2F;mirrors.ustc.edu.cn&amp;#x2F;rust-static&amp;#x2F;rustup&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h5 id=&#34;字节跳动镜像-2&#34;&gt;字节跳动镜像&lt;/h5&gt;
&lt;figure&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;export RUSTUP_DIST_SERVER&amp;#x3D;https:&amp;#x2F;&amp;#x2F;rsproxy.cn
export RUSTUP_UPDATE_ROOT&amp;#x3D;https:&amp;#x2F;&amp;#x2F;rsproxy.cn&amp;#x2F;rustup&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;这两行代码将会把rust的下载和更新源更改为中科大和字节跳动的镜像服务器&lt;/p&gt;
&lt;h3 id=&#34;2-正常安装或更新Rust&#34;&gt;2.正常安装或更新Rust&lt;/h3&gt;
&lt;p&gt;不关闭刚刚打开的命令行，将工作目录定位到rust安装包的位置。&lt;/p&gt;
&lt;p&gt;运行：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;.\rustup-init.exe&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;或者更新&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-wrapper&#34;&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;rustup update&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
</content>
        <category term="编程" />
        <category term="Rust" />
        <category term="解决方案" />
        <updated>2023-08-15T03:23:36.000Z</updated>
    </entry>
</feed>
