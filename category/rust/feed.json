{
    "version": "https://jsonfeed.org/version/1",
    "title": "LKHSSS的Blog • All posts by \"rust\" category",
    "description": "嗨嗨嗨",
    "home_page_url": "https://lkhsss.github.io",
    "items": [
        {
            "id": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Rust/%E4%BC%98%E9%9B%85%E5%9C%B0%E4%B8%BAiced%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0%E5%9B%BE%E6%A0%87/",
            "url": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Rust/%E4%BC%98%E9%9B%85%E5%9C%B0%E4%B8%BAiced%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0%E5%9B%BE%E6%A0%87/",
            "title": "优雅地为iced应用程序添加图标",
            "date_published": "2024-08-20T16:15:31.000Z",
            "content_html": "<h1>设置图标</h1>\n<p>图标分为两种。</p>\n<p>一种是显示在应用左上角异界任务栏上的图标。</p>\n<p>一种是系统读取文件时显示的图标（本文方法仅适用于Windows）。</p>\n<p>首先准备好一个符合windows规范的icon文件（本文以<code>icon.ico</code>为例），放在根目录中</p>\n<h2 id=\"在iced中设置应用内和任务栏图标\">在iced中设置应用内和任务栏图标</h2>\n<p>其他人多使用<code>icon::from_rgba()</code>方法，配合<code>image</code>库读取图片来为程序添加图标，但其实iced为大家提供了<code>image</code>feature来直接一步到位。<br>\n使用以下命令启用iced的<code>image</code>feature:</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cargo add iced -F image</code></pre></div></figure>\n<p>然后直接设置一手<code>iced::window::icon::from_file_data()</code>,然后用<code>include_bytes</code>宏直接读取图片数据，然后设置<code>window</code>的设置<code>icon</code>。</p>\n<blockquote>\n<p>图片不能是矢量图(<code>.svg</code>)，但是位图(<code>.png</code>,<code>.jpg</code>,<code>.ico</code>…)应该都可以。<br>\n图片的位置时相对于<code>main.rs</code>文件的。所以当icon文件放在项目根目录时，相对路径应为<code>../icon.png</code><br>\n同时``iced::window::icon<code>还有一个</code>from_file<code>方法，可以动态读取图标。而</code>from_file_data`主要是为了在编译时就硬编码好图标。</p>\n</blockquote>\n<p>设置代码如下：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\">use iced::window::&#123;icon, Icon&#125;;\nfn main() -&gt; iced::Result &#123;\n    App::run(Settings&#123;\n        window:iced::window::Settings&#123;\n    \t\ticon:Some(Icon::from(icon::from_file_data(include_bytes!(&quot;..&#x2F;icon.png&quot;),None).unwrap())),\n    \t\t..Default::default()\n\t\t&#125;,\n\t..Default::default()\n    \t&#125;)\n&#125;</code></pre></div></figure>\n<h2 id=\"设置程序文件图标\">设置程序文件图标</h2>\n<h3 id=\"首先添加编译脚本依赖\">首先添加编译脚本依赖</h3>\n<p>以下是<code>Cargo.toml</code>的内容</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-toml\" data-language=\"toml\"><code class=\"language-toml\">[package]\nbuild &#x3D; &quot;src&#x2F;build.rs&quot;\n[build-dependencies]\nwinres &#x3D; &quot;*&quot;</code></pre></div></figure>\n<p>然后在src文件夹中添加一个叫<code>build.rs</code>文件<br>\n文件内容如下</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\">use winres;\n\nfn main() &#123;\n    let mut res &#x3D; winres::WindowsResource::new();\n    res.set_icon(&quot;icon.ico&quot;);\n    res.compile().unwrap();\n&#125;</code></pre></div></figure>\n<blockquote>\n<p>winres的图片相对路径是项目根目录，所以<code>icon.ico</code>即可。<br>\n还可以在<code>Cargo.toml</code>中使用<code>[package.metadata.winres]</code>来设置应用的信息。具体请看<a href=\"https://learn.microsoft.com/zh-cn/windows/win32/menurc/versioninfo-resource?redirectedfrom=MSDN\">MSDN</a></p>\n</blockquote>\n<h3 id=\"最后一步！\">最后一步！</h3>\n<p>熟悉的构建环节！</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\">cargo build -r</code></pre></div></figure>\n",
            "tags": [
                "Rust",
                "iced"
            ]
        },
        {
            "id": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Rust/rust-%E4%BD%BF%E7%94%A8config%E9%85%8D%E7%BD%AE%E7%A8%8B%E5%BA%8F/",
            "url": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Rust/rust-%E4%BD%BF%E7%94%A8config%E9%85%8D%E7%BD%AE%E7%A8%8B%E5%BA%8F/",
            "title": "Rust-使用config配置程序",
            "date_published": "2024-02-16T03:33:38.000Z",
            "content_html": "<p>在应用开发中，我们通常会将一些可变项放到配置文件中。</p>\n<p>此次将使用<code>config</code>来进行配置项的读取。</p>\n<h2 id=\"安装依赖项\">安装依赖项</h2>\n<p>config提供api，去一个字段一个字段的读取配置。但是有一种更高级地方法，那就是声明一个struct，然后config帮我们进行反序列化处理，如果字段有错，会直接报错<code>config::ConfigError</code>。此方法更安全，更rust，代码脉络也更强。、</p>\n<p>因为要反序列化，所以要为struct启用<code>Deserialize</code>的trait。故而还要引用serde，并启用<code>derive</code>特性。</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-toml\" data-language=\"toml\"><code class=\"language-toml\">[dependencies]\nconfig &#x3D; &quot;0.14.0&quot;\nserde &#x3D; &#123; version &#x3D; &quot;1.0.196&quot;, features &#x3D; [&quot;derive&quot;] &#125;</code></pre></div></figure>\n<p>或者使用：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cargo add config serde -F serde&#x2F;derive</code></pre></div></figure>\n<h2 id=\"声明配置struct\">声明配置struct</h2>\n<p>此处的结构体为一个典型示例</p>\n<p><code>src/main.rs</code></p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\">use serde::Deserialize;\n\n#[derive(Debug,Deserialize)]\npub struct AppConfig &#123;\n    address: String, &#x2F;&#x2F; 配置项地址\n    port: u16, &#x2F;&#x2F; 配置项端口\n    server_name: String, &#x2F;&#x2F; 配置项服务器名称\n    database_url: String, &#x2F;&#x2F; 配置项数据库URL\n    database_port: u16, &#x2F;&#x2F; 配置项数据库端口\n    database_user: String, &#x2F;&#x2F; 配置项数据库用户名\n    database_password: String, &#x2F;&#x2F; 配置项数据库密码\n    debug: bool, &#x2F;&#x2F; 是否启用应用的调试(debug)模式\n&#125;</code></pre></div></figure>\n<h2 id=\"创建配置文件\">创建配置文件</h2>\n<p>在程序根目录下创建一个<code>toml</code>文件。这里创建一个名为<code>config.toml</code>的文件。</p>\n<p><code>config.toml</code></p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-toml\" data-language=\"toml\"><code class=\"language-toml\"># 配置项地址\naddress&#x3D;&quot;0.0.0.0&quot;\n# 配置项端口\nport&#x3D;8080 \n# 配置项服务器名称\nserver_name&#x3D; &quot;这是一个config库的demo&quot;\n\n#配置项数据库URL\ndatabase_url&#x3D;&quot;0.0.0.0&quot;\n# 配置项数据库端口\ndatabase_port&#x3D;&quot;7890&quot;\n# 配置项数据库用户名\ndatabase_user&#x3D;&quot;root&quot;\n# 配置项数据库密码\ndatabase_password&#x3D;&quot;ABCabc12345678&quot;\n\n# 是否启用应用的调试(debug)模式\ndebug&#x3D;true </code></pre></div></figure>\n<h2 id=\"读取配置文件\">读取配置文件</h2>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\">use config::&#123;Config, File&#125;;\nfn main() &#123;\n    let config &#x3D; Config::builder().add_source(File::with_name(&quot;config.toml&quot;)).build().expect(&quot;读取配置文件错误&quot;);;\n    let app_config: AppConfig &#x3D; config.try_deserialize().expect(&quot;反序列化失败！&quot;);\n    println!(&quot;&#123;:#?&#125;&quot;, app_config); &#x2F;&#x2F; 输出配置信息\n&#125;</code></pre></div></figure>\n<p>输出如下：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">AppConfig &#123;\n    address: &quot;0.0.0.0&quot;,\n    port: 8080,\n    server_name: &quot;这是一个config库的demo&quot;,\n    database_url: &quot;0.0.0.0&quot;,\n    database_port: 7890,\n    database_user: &quot;root&quot;,\n    database_password: &quot;ABCabc12345678&quot;,\n    debug: true,\n&#125;</code></pre></div></figure>\n<h2 id=\"完整代码\">完整代码</h2>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">├─src\n│  └─main.rs\n└─config.toml</code></pre></div></figure>\n<p><code>src/main.rs</code></p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\">use config::&#123;Config, File&#125;;\nuse serde::Deserialize;\n\n#[derive(Debug,Deserialize)]\npub struct AppConfig &#123;\n    address: String, &#x2F;&#x2F; 配置项地址\n    port: u16, &#x2F;&#x2F; 配置项端口\n    server_name: String, &#x2F;&#x2F; 配置项服务器名称\n    database_url: String, &#x2F;&#x2F; 配置项数据库URL\n    database_port: u16, &#x2F;&#x2F; 配置项数据库端口\n    database_user: String, &#x2F;&#x2F; 配置项数据库用户名\n    database_password: String, &#x2F;&#x2F; 配置项数据库密码\n    debug: bool, &#x2F;&#x2F; 是否启用应用的调试(debug)模式\n&#125;\nfn main() &#123;\n    let config &#x3D; Config::builder().add_source(File::with_name(&quot;config.toml&quot;)).build().expect(&quot;读取配置文件错误&quot;);\n    let app_config: AppConfig &#x3D; config.try_deserialize().expect(&quot;反序列化失败！&quot;);\n    println!(&quot;&#123;:#?&#125;&quot;, app_config); &#x2F;&#x2F; 输出配置信息\n&#125;\n</code></pre></div></figure>\n<p><code>config.toml</code></p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-toml\" data-language=\"toml\"><code class=\"language-toml\"># 配置项地址\naddress&#x3D;&quot;0.0.0.0&quot;\n# 配置项端口\nport&#x3D;8080 \n# 配置项服务器名称\nserver_name&#x3D; &quot;这是一个config库的demo&quot;\n\n#配置项数据库URL\ndatabase_url&#x3D;&quot;0.0.0.0&quot;\n# 配置项数据库端口\ndatabase_port&#x3D;&quot;7890&quot;\n# 配置项数据库用户名\ndatabase_user&#x3D;&quot;root&quot;\n# 配置项数据库密码\ndatabase_password&#x3D;&quot;ABCabc12345678&quot;\n\n# 是否启用应用的调试(debug)模式\ndebug&#x3D;true </code></pre></div></figure>\n",
            "tags": [
                "编程",
                "Rust"
            ]
        },
        {
            "id": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Rust/rustup%E6%8D%A2%E6%BA%90/",
            "url": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Rust/rustup%E6%8D%A2%E6%BA%90/",
            "title": "Rustup换源",
            "date_published": "2023-08-15T03:23:36.000Z",
            "content_html": "<p>由于rust的官方服务器在中国访问很慢，所以在安装和更新的时候经常出现下载时卡住的情况。<br>\n这时应换源处理。</p>\n<h2 id=\"换源\">换源</h2>\n<h3 id=\"1-添加临时环境变量\">1.添加临时环境变量</h3>\n<h4 id=\"Windows\">Windows</h4>\n<h5 id=\"中科大镜像\">中科大镜像</h5>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">$ENV:RUSTUP_DIST_SERVER&#x3D;&#39;https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;rust-static&#39;\n$ENV:RUSTUP_UPDATE_ROOT&#x3D;&#39;https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;rust-static&#x2F;rustup&#39;</code></pre></div></figure>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">set RUSTUP_DIST_SERVER&#x3D;https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;rust-static\nset RUSTUP_UPDATE_ROOT&#x3D;https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;rust-static&#x2F;rustup</code></pre></div></figure>\n<h5 id=\"字节跳动镜像\">字节跳动镜像</h5>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">$ENV:RUSTUP_DIST_SERVER&#x3D;&#39;https:&#x2F;&#x2F;rsproxy.cn&#39;\n$ENV:RUSTUP_UPDATE_ROOT&#x3D;&#39;https:&#x2F;&#x2F;rsproxy.cn&#x2F;rustup&#39;</code></pre></div></figure>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">set RUSTUP_DIST_SERVER&#x3D;https:&#x2F;&#x2F;rsproxy.cn\nset RUSTUP_UPDATE_ROOT&#x3D;https:&#x2F;&#x2F;rsproxy.cn&#x2F;rustup</code></pre></div></figure>\n<h4 id=\"Linux\">Linux</h4>\n<h5 id=\"中科大镜像-2\">中科大镜像</h5>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">export RUSTUP_DIST_SERVER&#x3D;https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;rust-static\nexport RUSTUP_UPDATE_ROOT&#x3D;https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;rust-static&#x2F;rustup</code></pre></div></figure>\n<h5 id=\"字节跳动镜像-2\">字节跳动镜像</h5>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">export RUSTUP_DIST_SERVER&#x3D;https:&#x2F;&#x2F;rsproxy.cn\nexport RUSTUP_UPDATE_ROOT&#x3D;https:&#x2F;&#x2F;rsproxy.cn&#x2F;rustup</code></pre></div></figure>\n<p>这两行代码将会把rust的下载和更新源更改为中科大和字节跳动的镜像服务器</p>\n<h3 id=\"2-正常安装或更新Rust\">2.正常安装或更新Rust</h3>\n<p>不关闭刚刚打开的命令行，将工作目录定位到rust安装包的位置。</p>\n<p>运行：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">.\\rustup-init.exe</code></pre></div></figure>\n<p>或者更新</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rustup update</code></pre></div></figure>\n",
            "tags": [
                "编程",
                "Rust",
                "解决方案"
            ]
        }
    ]
}