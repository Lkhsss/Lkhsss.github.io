{
    "version": "https://jsonfeed.org/version/1",
    "title": "LKH的网站 • All posts by \"go\" tag",
    "description": "一个年轻程序猿的主页，包含了很多东西......",
    "home_page_url": "https://lkhsss.github.io",
    "items": [
        {
            "id": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Go/go%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84/",
            "url": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Go/go%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84/",
            "title": "Go语言结构",
            "date_published": "2023-02-19T08:38:27.000Z",
            "content_html": "<h2 id=\"语言结构\">语言结构</h2>\n<p>Go的语言结构分为</p>\n<ul>\n<li><a href=\"#%E5%8C%85%E5%A3%B0%E6%98%8E\">包声明</a></li>\n<li><a href=\"#%E5%BC%95%E5%85%A5%E5%8C%85\">引入包</a></li>\n<li><a href=\"#%E5%87%BD%E6%95%B0\">函数</a></li>\n<li><a href=\"#%E5%8F%98%E9%87%8F\">变量</a></li>\n<li><a href=\"#%E8%AF%AD%E5%8F%A5\">语句</a></li>\n<li><a href=\"#%E6%B3%A8%E9%87%8A\">注释</a></li>\n</ul>\n<p>既然是学习语言结构，那么还是用最简单的<a href=\"/%E7%BC%96%E7%A8%8B/Go/go-hello-world/\" title=\"Go: Hello World!\">HelloWorld</a>演示好了</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main &#x2F;* 包声明 *&#x2F;\n\nimport &quot;fmt&quot; &#x2F;* 引入包 *&#x2F;\n\nfunc main() &#123;\n   &#x2F;* 这是我的第一个简单的程序 *&#x2F;\n   fmt.Println(&quot;Hello, World!&quot;)&#x2F;&#x2F;基本的输出语句，将自动换行\n   &#x2F;&#x2F;这是一条单行注释\n   &#x2F;* 这是\n   一条\n   多行\n   注释\n   *&#x2F;\n&#125;</code></pre></div></figure>\n<h3 id=\"包声明\">包声明</h3>\n<p><code>package main</code>定义了包名。一个Go程序必须在源文件中非注释的第一行指明这个文件属于哪个包。</p>\n<div class=\"note note-warning\">\n            <p>package main表示一个可独立执行的程序，<strong>每个 Go 应用程序都包含一个名为 <code>main</code> 的包</strong>。</p>\n          </div>\n<div class=\"note note-warning\">\n            <p>注意：</p><ul><li>文件名与包名没有直接关系，不一定要将文件名与包名定成同一个</li><li>文件夹名与包名没有直接关系，并非需要一致</li><li>同一个文件夹下的文件只能有一个包名，否则编译报错。<span class=\"label label-danger\">package command-line-arguments is not a main package</span></li></ul>\n          </div>\n<h3 id=\"引入包\">引入包</h3>\n<p><code>import &quot;fmt&quot;</code> 告诉 Go 编译器这个程序需要使用 <code>fmt</code> 包（的函数，或其他元素），<code>fmt</code> 包实现了基本的格式化 I/O（输入/输出）</p>\n<div class=\"note note-success\">\n            <p>约等于Python中的<code>print()</code>函数</p>\n          </div>\n<h3 id=\"函数\">函数</h3>\n<p><code>func</code>是Go语言定义函数的方法。</p>\n<div class=\"note note-success\">\n            <p>约等于Python中的<code>def main():</code></p>\n          </div>\n<p><code>func main()</code> 是程序开始执行的函数。<code>main()</code> 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数</p>\n<div class=\"note note-info\">\n            <p>如果有 <code>init()</code> 函数则会先执行该函数。</p>\n          </div>\n<h3 id=\"变量\">变量</h3>\n<p>与其他语言相通</p>\n<div class=\"note note-danger\">\n            <p>但需要注意的是：当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 protected ）。</p>\n          </div>\n<h3 id=\"语句\">语句</h3>\n<p><code>fmt.Println()</code> 可以将字符串输出到控制台，并在最后自动增加换行字符 \\n。<br>\n使用 <code>fmt.Print(&quot;hello, world\\n&quot;)</code> 可以得到相同的结果。<br>\n<code>Print</code> 和 <code>Println</code> 这两个函数也支持使用变量，如：<code>fmt.Println(arr)</code> 。如果没有特别指定，它们会以默认的打印格式将变量 <code>arr</code> 输出到控制台。</p>\n<h3 id=\"注释\">注释</h3>\n<p>使用以 <code>//</code> 开头的单行注释，而<code>/*...*/</code> 是多行注释，这点与C和C艹是相似的。</p>\n",
            "tags": [
                "Go",
                "学习笔记"
            ]
        },
        {
            "id": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Go/go-hello-world/",
            "url": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Go/go-hello-world/",
            "title": "Go: Hello World!",
            "date_published": "2023-02-19T08:17:10.000Z",
            "content_html": "<h2 id=\"Go语言环境搭建\">Go语言环境搭建</h2>\n<p>官方下载地址：<a href=\"https://golang.org/dl/\">https://golang.org/dl/</a></p>\n<p>镜像站：<a href=\"https://golang.google.cn/dl/\">https://golang.google.cn/dl/</a></p>\n<hr>\n<h2 id=\"Hello-World\">Hello World!</h2>\n<p>学习一门语言的第一步，那必定是去copy一份经典的HelloWorld啦 :)</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n   &#x2F;* 这是我的第一个简单的程序 *&#x2F;\n   fmt.Println(&quot;Hello, World!&quot;)\n&#125;</code></pre></div></figure>\n<p>随便创建一个文件，修改后缀为<code>.go</code>，直接把上面的代码copy进去。</p>\n<p>作为第一个程序，我理所当然地取名为<code>helloworld.go</code></p>\n<p>保存后直接一顿操作在<strong>当前目录</strong>打开终端，输入：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go run test.go</code></pre></div></figure>\n<p>如果成功的话，会输出：</p>\n<span class=\"label label-success\">成功</span>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">D:\\Go&gt;go run test.go\nHello, World!</code></pre></div></figure>\n<div class=\"note note-info\">\n            <p><span class=\"label label-danger\">失败</span></p><p>如果显示<code>'go'不是内部或外部命令，也不是可运行的程序或批处理文件。</code>，那应当为Go语言添加系统环境，或这重新安装。</p>\n          </div>\n",
            "tags": [
                "Go",
                "学习笔记"
            ]
        }
    ]
}