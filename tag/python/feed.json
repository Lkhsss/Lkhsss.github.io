{
    "version": "https://jsonfeed.org/version/1",
    "title": "LKH的网站 • All posts by \"python\" tag",
    "description": "一个年轻程序猿的主页，包含了很多东西......",
    "home_page_url": "https://lkhsss.github.io",
    "items": [
        {
            "id": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Python/%E5%BA%93/python-click%E5%BA%93/",
            "url": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Python/%E5%BA%93/python-click%E5%BA%93/",
            "title": "python-Click库",
            "date_published": "2022-12-10T02:20:24.000Z",
            "content_html": "<h1>Click</h1>\n<p>Click全名<em>Command Line Interface Creation Kit</em>，是一个用于构建命令行的第三方库，相较于Python自带的<a href=\"https://docs.python.org/zh-cn/3/library/argparse.html\">Argparse</a>更加友好和易用。</p>\n<hr>\n<p>官方文档：<a href=\"https://palletsprojects.com/p/click/\">Click | The Pallets Projects</a></p>\n<p>PyPI：<a href=\"https://pypi.org/project/click/\">Click · PyPI</a></p>\n<hr>\n<h2 id=\"安装\">安装</h2>\n<p><code>pip install click</code></p>\n<hr>\n<h2 id=\"用法\">用法</h2>\n<p>引用库<code>import click</code></p>\n<h3 id=\"click-command\">@click.command()</h3>\n<p>使用<code>@click.command()</code>修饰想要构建为命令行命令的函数</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#39;&#39;&#39;\nfilename: test.py\n&#39;&#39;&#39;\nimport click\n\n@click.command()  # 为函数&#96;test()&#96;添加修饰器\ndef test():\n    click.echo(&quot;测试函数，没有什么卵用&quot;)\n\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;:\n    test()</code></pre></div></figure>\n<p>添加后和没有加没有任何不同，因为没有使用<code>@click.option()</code>进行命令行选项的进一步设置</p>\n<p>使用<code>click.echo()</code>是为了更好的终端兼容性</p>\n<h3 id=\"click-option\">@click.option()</h3>\n<p>使用<code>@click.option()</code>增加修饰选项</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#39;&#39;&#39;\nfilename: test.py\n&#39;&#39;&#39;\nimport click\n\n@click.command()  # 为函数&#96;test()&#96;添加修饰器\n@click.option(\n    &quot;-n&quot;,\n    &quot;--name&quot;,\n    prompt&#x3D;&quot;请输入你的名字&quot;,\n    default&#x3D;&quot;无名氏&quot;,\n    help&#x3D;&quot;你的名字。默认值为“无名氏”&quot;,\n    type&#x3D;str,\n) # 设置参数\ndef test(name):\n    click.echo((&quot;你输入的名字为：&#123;&#125;&quot;).format(name)) #输出\n\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;: # 程序入口\n    test()</code></pre></div></figure>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lkhsss@LKH-PC:~$ python test.py -n LKH\n你输入的名字为：LKH\n\nlkhsss@LKH-PC:~$ python test.py\n请输入你的名字 [无名氏]: LKH\n你输入的名字为：LKH</code></pre></div></figure>\n<ul>\n<li>\n<p><code>@click.option()</code>接受一种参数多种名字，上例的<code>-n</code>和<code>--name</code>都指向了一个函数</p>\n</li>\n<li>\n<p>使用<code>prompt</code>指定必须要求输入的参数在没有传入时显示的提示</p>\n<ul>\n<li>\n<blockquote>\n<p>当使用了<code>prompt</code>时，click会认为该参数为必须项，会主动询问参数的值</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>使用<code>help</code>指定该参数的帮助信息</p>\n</li>\n<li>\n<p>使用<code>type</code>指定传入数据的类型</p>\n<ul>\n<li>使用<code>type=click.Choice['A','B']</code>限制该参数只能从A和B中选择</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"菜单选项\">菜单选项</h3>\n<p>配置好参数后，click自动为我们准备了<code>--help</code>选项，其中包含了我们在<code>help</code>中加入的帮助信息</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lkhsss@LKH-PC:~$ python test.py --help\nUsage: test.py [OPTIONS]\n\nOptions:\n  -n, --name TEXT  你的名字。默认值为“无名氏”\n  --help           Show this message and exit.</code></pre></div></figure>\n<hr>\n<h2 id=\"示例\">示例</h2>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#39;&#39;&#39;\nfilename: test.py\nauthor: Lkhsss\n&#39;&#39;&#39;\nimport click\n\n@click.command()  # 为函数&#96;test()&#96;添加修饰器\n@click.option(\n    &quot;-n&quot;,\n    &quot;--name&quot;,\n    prompt&#x3D;&quot;请输入你的名字&quot;,\n    default&#x3D;&quot;无名氏&quot;,\n    help&#x3D;&quot;你的名字，传入参数后将显示在输出中。默认值为“无名氏”&quot;,\n    type&#x3D;str,\n)\n# 选择可以传入&#96;test()&#96;的参数\n# 可以使用多个参数名，输入&quot;-n&quot;，&quot;--name&quot;都会指向&#96;test()&#96;函数\n# 使用default参数设置参数默认值\n# 使用help参数设置帮助菜单\n@click.option(\n    &quot;-c&quot;,\n    &quot;--count&quot;,\n    prompt&#x3D;&quot;请输入循环次数&quot;,\n    default&#x3D;&quot;1&quot;,\n    help&#x3D;&quot;显示名字次数，默认值为1&quot;,\n    type&#x3D;int\n)\ndef test(name, count):\n    for i in range(count):\n        click.echo((&quot;&#123;&#125;，你好。&quot;).format(name))\n    click.echo(&quot;这是一个示例函数，可以输出你在命令行中输入的名字，用来测试click库&quot;)\n\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;:\n    test()</code></pre></div></figure>\n",
            "tags": [
                "编程",
                "Python"
            ]
        }
    ]
}