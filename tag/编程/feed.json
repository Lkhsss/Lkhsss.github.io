{
    "version": "https://jsonfeed.org/version/1",
    "title": "LKH的网站 • All posts by \"编程\" tag",
    "description": "一个年轻程序猿的主页，包含了很多东西......",
    "home_page_url": "https://lkhsss.github.io",
    "items": [
        {
            "id": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Python/python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",
            "url": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Python/python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",
            "title": "Python环境搭建",
            "date_published": "2023-03-05T04:55:12.000Z",
            "content_html": "<h1>啥是Python?</h1>\n<blockquote><p>Python由<a href=\"https://baike.baidu.com/item/%E8%8D%B7%E5%85%B0/190469?fromModule=lemma_inlink\">荷兰</a><a href=\"https://baike.baidu.com/item/%E6%95%B0%E5%AD%A6/107037?fromModule=lemma_inlink\">数学</a>和<a href=\"https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/9132?fromModule=lemma_inlink\">计算机科学</a>研究学会的<a href=\"https://baike.baidu.com/item/%E5%90%89%E5%A4%9A%C2%B7%E8%8C%83%E7%BD%97%E8%8B%8F%E5%A7%86/328361?fromModule=lemma_inlink\">吉多·范罗苏姆</a>于1990年代初设计，作为一门叫做<a href=\"https://baike.baidu.com/item/ABC%E8%AF%AD%E8%A8%80/334996?fromModule=lemma_inlink\">ABC语言</a>的替代品。Python提供了高效的高级<a href=\"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1450?fromModule=lemma_inlink\">数据结构</a>，还能简单有效地<a href=\"https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2262089?fromModule=lemma_inlink\">面向对象</a>编程。Python<a href=\"https://baike.baidu.com/item/%E8%AF%AD%E6%B3%95/23734941?fromModule=lemma_inlink\">语法</a>和动态类型，以及<a href=\"https://baike.baidu.com/item/%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80/8888952?fromModule=lemma_inlink\">解释型语言</a>的本质，使它成为多数平台上写<a href=\"https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC/1697005?fromModule=lemma_inlink\">脚本</a>和快速开发应用的编程语言，随着版本的不断更新和语言新功能的添加，逐渐被用于独立的、<a href=\"https://baike.baidu.com/item/%E5%A4%A7%E5%9E%8B%E9%A1%B9%E7%9B%AE/3986637?fromModule=lemma_inlink\">大型项目</a>的开发。</p>\n<footer><strong>百度百科</strong></footer></blockquote>\n<p>总之是一个对初学者来说很友好的编程语言（盯→_→    汇编）。</p>\n<p>Python在数据处理，网络爬虫，训练AI等方面都很强大，很适合搞大数据和人工智能。</p>\n<hr>\n<h1>安装Python</h1>\n<p>Python的下载主要在官网<a href=\"https://www.python.org/downloads/\"><em>Python</em>.org</a>上</p>\n<div class=\"note note-warning\">\n            <p>由于官网在国外，一般会出现加载下载很慢甚至加载不出来的情况。这个时候只能等待加载或切换网络</p>\n          </div>\n<h2 id=\"版本与选择\">版本与选择</h2>\n<p>Python支持<a href=\"https://www.python.org/downloads/windows/\">Windows</a>，<a href=\"https://www.python.org/downloads/source/\">Linux/UNIX</a>和<a href=\"https://www.python.org/downloads/macos/\">MacOS</a>以及<a href=\"https://www.python.org/download/other/\">其他</a>系统</p>\n<p>Python现在的主要版本为3.x版本，相对于2.0版本有质的提升以及有部分语法修改，建议现在直接学习3.x。</p>\n<div class=\"note note-warning\">\n            <p>建议初学者选定版本后就暂时不要再更换版本。更换版本是可能出现各种奇怪的问题。</p>\n          </div>\n<div class=\"note note-info\">\n            <p>目前的最新版本为<a href=\"https://www.python.org/downloads/release/python-3112/\">3.11.2</a>，是个尝鲜版本（听说运行速度有很大的提升？），但是不稳定。</p><p>建议大家食用3.9或3.10</p>\n          </div>\n<div class=\"note note-warning\">\n            <p>下载时注意选择电脑的位数版本</p><p><code>Windows x86-64 executable installer</code> 为64位版本</p><p><code>Windows x86 executable installer</code> 为32位版本</p><p>不清楚的话就使用64位版本的吧，现在的电脑应该都是64位了。老的电脑应该还是32位。<s>实在不行就都试一遍</s></p>\n          </div>\n<div class=\"note note-danger\">\n            <p>Windows7系统貌似最高只支持3.8 <s>(弔</s> ，建议食用<a href=\"https://www.python.org/downloads/release/python-386/\">3.8.6</a>或<a href=\"https://www.python.org/downloads/release/python-375/\">3.7.5</a></p>\n          </div>\n<h2 id=\"安装\">安装</h2>\n<p>下载好的安装包后是酱紫的（这是我用过的各个版本）</p>\n<p><img src=\"https://cdn.staticaly.com/gh/Lkhsss/picx@main/%E7%BC%96%E7%A8%8B/Python/python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/python%E5%AE%89%E8%A3%85%E5%8C%85.webp\" alt=\"python安装包\"></p>\n<h3 id=\"双击运行\">双击运行</h3>\n<p>运行出来就是酱紫</p>\n<p><img src=\"https://cdn.staticaly.com/gh/Lkhsss/picx@main/%E7%BC%96%E7%A8%8B/Python/python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E5%8F%8C%E5%87%BB%E8%BF%90%E8%A1%8C%E5%AE%89%E8%A3%85.webp\" alt=\"双击运行安装\"></p>\n<h3 id=\"添加Python到系统环境（重点！）\">添加Python到系统环境（重点！）</h3>\n<div class=\"note note-danger\">\n            <p>除非要安装多个版本的Python，否则一定一定要记得勾选<code>Add python.exe to PATH</code>这个选项！！！！（初学者墙裂推荐）</p><p>会省去很多麻烦！！！</p>\n          </div>\n<p><img src=\"https://cdn.staticaly.com/gh/Lkhsss/picx@main/%E7%BC%96%E7%A8%8B/Python/python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E4%B8%80%E5%AE%9A%E8%A6%81%E5%8B%BE%E9%80%89Add-python.exe-to-PATH-%E9%80%89%E9%A1%B9!.webp\" alt=\"一定要勾选Add-python\"></p>\n<h3 id=\"自定义安装位置\">自定义安装位置</h3>\n<p>选择<code>Customize installation</code>选项</p>\n<p><img src=\"https://cdn.staticaly.com/gh/Lkhsss/picx@main/%E7%BC%96%E7%A8%8B/Python/python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E9%80%89%E6%8B%A9%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%89%E8%A3%85.webp\" alt=\"选择自定义安装\"></p>\n<div class=\"note note-warning\">\n            <p>如果此选项为灰色无法点击，则说明已经安装过同一版本或同一大版本的Python（如3.9.2和3.9.5为同一大版本）。</p><p>这时需要抉择你是要使用以前安装的版本还是现在安装的版本。如果使用现在安装的版本，则需要卸载之前安装的版本。</p>\n          </div>\n<p>点击后出现的就是酱紫，选项全选即可。</p>\n<p><img src=\"https://cdn.staticaly.com/gh/Lkhsss/picx@main/%E7%BC%96%E7%A8%8B/Python/python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E7%82%B9%E5%87%BB%E5%90%8E%E5%85%A8%E9%80%89%E5%8D%B3%E5%8F%AF.webp\" alt=\"点击后全选即可\"></p>\n<p>点击Next</p>\n<p><img src=\"https://cdn.staticaly.com/gh/Lkhsss/picx@main/%E7%BC%96%E7%A8%8B/Python/python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85.webp\" alt=\"配置安装\"></p>\n<p><code>Precompile standard library</code>这个选项可选可不选，选了后在将来打包python程序的时候,速度会更快。<s>（不过我们暂时用不着</s></p>\n<p>点击下面的<code>Browse</code>可以选择安装的位置</p>\n<div class=\"note note-warning\">\n            <p>程序最好不要装在C盘(系统盘)，会拖慢系统运行速度。也不要放在根目录，不方便管理，建议和我一样建个专门的Python文件夹管理不同的版本。</p><p><img src=\"https://cdn.staticaly.com/gh/Lkhsss/picx@main/%E7%BC%96%E7%A8%8B/Python/python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E4%B8%93%E9%97%A8%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AAPython%E6%96%87%E4%BB%B6%E5%A4%B9%E7%AE%A1%E7%90%86%E7%89%88%E6%9C%AC.webp\" alt=\"专门建立一个Python文件夹管理版本\"></p>\n          </div>\n<h3 id=\"安装-2\">安装</h3>\n<p>点击<code>Install</code>即可开始安装</p>\n<p><img src=\"https://cdn.staticaly.com/gh/Lkhsss/picx@main/%E7%BC%96%E7%A8%8B/Python/python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E5%AE%89%E8%A3%85.webp\" alt=\"安装\"></p>\n<div class=\"note note-success\">\n            <p>安装成功！</p><p><img src=\"https://cdn.staticaly.com/gh/Lkhsss/picx@main/%E7%BC%96%E7%A8%8B/Python/python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.webp\" alt=\"安装成功\"></p>\n          </div>\n<h2 id=\"验证是否安装成功\">验证是否安装成功</h2>\n<p>在命令行输入<code>python -V</code>可以显示已经安装过的Python的版本信息</p>\n<p><img src=\"https://cdn.staticaly.com/gh/Lkhsss/picx@main/%E7%BC%96%E7%A8%8B/Python/python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E9%AA%8C%E8%AF%81%E5%AE%89%E8%A3%85.webp\" alt=\"验证安装\"></p>\n<hr>\n<h1>安装VScode</h1>\n<p>VSCode（全称：Visual Studio Code）是一款由微软开发且跨平台的免费源代码编辑器，VSCode 开发环境非常简单易用。</p>\n<div class=\"note note-info\">\n            <p>Visual Studio Code其实就是Visual Studio它儿子。相对于Visual Studio的动辄十多个G，VScode轻量，可以做到秒开，并且凭借着强大的插件市场几乎支持所有编程语言。</p>\n          </div>\n<h2 id=\"安装-3\">安装</h2>\n<p>VSCode 安装也很简单，打开官网 <a href=\"https://code.visualstudio.com/\">https://code.visualstudio.com/</a> 下载软件包，一步步安装即可，安装过程注意安装路径设置、环境变量默认自动添加到系统中，勾选以下所有选项：</p>\n<p><a href=\"https://www.runoob.com/wp-content/uploads/2021/08/RM04TZb.png\">勾选以下所有选项</a></p>\n<h2 id=\"安装python插件\">安装python插件</h2>\n<p>安装好后在左侧的插件商店安装python插件<br>\n<img src=\"https://www.runoob.com/wp-content/uploads/2021/08/D256086F-9E7F-4975-9362-3E3DC5A563AB.jpeg\" alt=\"安装python插件\"></p>\n<div class=\"note note-warning\">\n            <p>VScode的功能很多，可以自行百度或摸索</p>\n          </div>",
            "tags": [
                "学习笔记",
                "编程",
                "Python"
            ]
        },
        {
            "id": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Go/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/",
            "url": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Go/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/",
            "title": "Go语言基础语法",
            "date_published": "2023-03-04T17:23:36.000Z",
            "content_html": "<div class=\"note note-success\">\n            <p>上文：<strong><a href=\"/%E7%BC%96%E7%A8%8B/Go/go%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84/\" title=\"Go语言结构\">Go语言结构</a></strong></p>\n          </div>\n<h2 id=\"行代码\">行代码</h2>\n<p>Go语言的行代码由 <a href=\"#%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"label label-success\">关键字</span></a>，<span class=\"label label-success\">标识符</span>，<span class=\"label label-success\">常量</span>，<span class=\"label label-success\">字符串</span>，<span class=\"label label-success\">符号</span> 等部分组成</p>\n<p>Go语言的行代码末尾不需要加结尾符号（比如C语言中的<code>;</code>），这些由编译器自动完成。</p>\n<div class=\"note note-warning\">\n            <p><strong>当然</strong>，多个语句写在同一行时，也可以用<code>;</code>手动将其区分。但是，<span class=\"label label-danger\">不推荐</span></p>\n          </div>\n<div class=\"note note-info\">\n            <p><span class=\"label label-danger\">不推荐</span>写成这样：</p><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">fmt.Println(&quot;haihaihai&quot;);fmt.Println(&quot;不推荐此用法&quot;)</code></pre></div></figure><p><span class=\"label label-success\">推荐</span>写成这样，增加代码的可阅读性：</p><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">fmt.Println(&quot;haihaihai&quot;)\nfmt.Println(&quot;推荐此用法&quot;)</code></pre></div></figure>\n          </div>\n<h2 id=\"标识符\">标识符</h2>\n<blockquote><p>标识符是用户编程时使用的名字，用于给变量、常量、函数、语句块等命名，以建立起名称与使用之间的关系。标识符通常由字母和数字以及其它字符构成。</p>\n<footer><strong>百度百科</strong></footer></blockquote>\n<p>Go语言的标识符实际上是由 <strong>一个或是多个字母(A~Z和a~z)、数字(0~9)、下划线<code>_</code></strong> 组成的序列，但是第一个字符必须是<strong>字母或下划线</strong>而不能是数字或<a href=\"#%E5%85%B3%E9%94%AE%E5%AD%97\">关键字</a>。</p>\n<h2 id=\"字符串\">字符串</h2>\n<p>和其他语言相同，但是Go语言字符串的特性是可以用<code>+</code>将两端字符串直接拼接在一起。</p>\n<div class=\"note note-info\">\n            <p>首尾相连，就像这样：</p><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">fmt.Println(&quot;Hello&quot; + &quot;World&quot;)\t&#x2F;&#x2F;此行将输出HelloWorld\nfmt.Println(&quot;HelloWorld&quot;)\t\t\t&#x2F;&#x2F;此行也将输出HelloWorld</code></pre></div></figure>\n          </div>\n<div class=\"note note-success\">\n            <p><s>怎么感觉又把Python基础学了一遍（小声BB</s></p>\n          </div>\n<h2 id=\"关键字\">关键字</h2>\n<p>和其它语言一样，Go也有其独特的保留字。</p>\n<div class=\"note note-danger\">\n            <p>未填写是因为还未学习 ( qwq )</p>\n          </div>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">保留字</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">保留字</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">package</td>\n<td style=\"text-align:center\">定义包名</td>\n<td style=\"text-align:center\">default</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">func</td>\n<td style=\"text-align:center\">定义函数</td>\n<td style=\"text-align:center\">interface</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">import</td>\n<td style=\"text-align:center\">引入包</td>\n<td style=\"text-align:center\">break</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">var</td>\n<td style=\"text-align:center\">定义变量</td>\n<td style=\"text-align:center\">case</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">defer</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">go</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">struct</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">map</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">else</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">chan</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">switch</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">goto</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fallthrough</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">if</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">range</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">type</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">continue</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">return</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">for</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">select</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">const</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Go",
                "学习笔记",
                "编程"
            ]
        },
        {
            "id": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Go/go%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84/",
            "url": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Go/go%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84/",
            "title": "Go语言结构",
            "date_published": "2023-02-19T08:38:27.000Z",
            "content_html": "<div class=\"note note-success\">\n            <p>上文：<strong><a href=\"/%E7%BC%96%E7%A8%8B/Go/go-hello-world/\" title=\"Go: Hello World!\">Go: Hello World!</a></strong></p>\n          </div>\n<h2 id=\"语言结构\">语言结构</h2>\n<p>Go的语言结构分为</p>\n<ul>\n<li><a href=\"#%E5%8C%85%E5%A3%B0%E6%98%8E\">包声明</a></li>\n<li><a href=\"#%E5%BC%95%E5%85%A5%E5%8C%85\">引入包</a></li>\n<li><a href=\"#%E5%87%BD%E6%95%B0\">函数</a></li>\n<li><a href=\"#%E5%8F%98%E9%87%8F\">变量</a></li>\n<li><a href=\"#%E8%AF%AD%E5%8F%A5\">语句</a></li>\n<li><a href=\"#%E6%B3%A8%E9%87%8A\">注释</a></li>\n</ul>\n<p>既然是学习语言结构，那么还是用最简单的<a href=\"/%E7%BC%96%E7%A8%8B/Go/go-hello-world/\" title=\"Go: Hello World!\">HelloWorld</a>演示好了</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main &#x2F;* 包声明 *&#x2F;\n\nimport &quot;fmt&quot; &#x2F;* 引入包 *&#x2F;\n\nfunc main() &#123;\n   &#x2F;* 这是我的第一个简单的程序 *&#x2F;\n   fmt.Println(&quot;Hello, World!&quot;)&#x2F;&#x2F;基本的输出语句，将自动换行\n   &#x2F;&#x2F;这是一条单行注释\n   &#x2F;* 这是\n   一条\n   多行\n   注释\n   *&#x2F;\n&#125;</code></pre></div></figure>\n<h3 id=\"包声明\">包声明</h3>\n<p><code>package main</code>定义了包名。一个Go程序必须在源文件中非注释的第一行指明这个文件属于哪个包。</p>\n<div class=\"note note-warning\">\n            <p>package main表示一个可独立执行的程序，<strong>每个 Go 应用程序都包含一个名为 <code>main</code> 的包</strong>。</p>\n          </div>\n<div class=\"note note-warning\">\n            <p>注意：</p><ul><li>文件名与包名没有直接关系，不一定要将文件名与包名定成同一个</li><li>文件夹名与包名没有直接关系，并非需要一致</li><li>同一个文件夹下的文件只能有一个包名，否则编译报错。<span class=\"label label-danger\">package command-line-arguments is not a main package</span></li></ul>\n          </div>\n<h3 id=\"引入包\">引入包</h3>\n<p><code>import &quot;fmt&quot;</code> 告诉 Go 编译器这个程序需要使用 <code>fmt</code> 包（的函数，或其他元素），<code>fmt</code> 包实现了基本的格式化 I/O（输入/输出）</p>\n<div class=\"note note-success\">\n            <p>约等于Python中的<code>print()</code>函数</p>\n          </div>\n<h3 id=\"函数\">函数</h3>\n<p><code>func</code>是Go语言定义函数的方法。</p>\n<div class=\"note note-success\">\n            <p>约等于Python中的<code>def main():</code></p>\n          </div>\n<p><code>func main()</code> 是程序开始执行的函数。<code>main()</code> 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数</p>\n<div class=\"note note-info\">\n            <p>如果有 <code>init()</code> 函数则会先执行该函数。</p>\n          </div>\n<h3 id=\"变量\">变量</h3>\n<p>与其他语言相通</p>\n<div class=\"note note-danger\">\n            <p>但需要注意的是：当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 protected ）。</p>\n          </div>\n<h3 id=\"语句\">语句</h3>\n<p><code>fmt.Println()</code> 可以将字符串输出到控制台，并在最后自动增加换行字符 \\n。<br>\n使用 <code>fmt.Print(&quot;hello, world\\n&quot;)</code> 可以得到相同的结果。<br>\n<code>Print</code> 和 <code>Println</code> 这两个函数也支持使用变量，如：<code>fmt.Println(arr)</code> 。如果没有特别指定，它们会以默认的打印格式将变量 <code>arr</code> 输出到控制台。</p>\n<h3 id=\"注释\">注释</h3>\n<p>使用以 <code>//</code> 开头的单行注释，而<code>/*...*/</code> 是多行注释，这点与C和C艹是相似的。</p>\n",
            "tags": [
                "Go",
                "学习笔记",
                "编程"
            ]
        },
        {
            "id": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Java/java%E5%85%A5%E9%97%A8/",
            "url": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Java/java%E5%85%A5%E9%97%A8/",
            "title": "Java入门",
            "date_published": "2022-12-12T16:32:49.000Z",
            "content_html": "<h1>万事开头难，先写一个 HelloWorld</h1>\n<p>从网上 copy 了一个最简单的 java 程序下来，体会 java 的基础语法</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class HelloWorld &#123;\n    &#x2F;* 第一个Java程序\n     * 它将输出字符串 Hello World\n     *&#x2F;\n    public static void main(String[] args) &#123;\n        System.out.println(&quot;Hello World&quot;); &#x2F;&#x2F; 输出 Hello World\n    &#125;\n&#125;</code></pre></div></figure>\n<hr>\n<h2 id=\"运行步骤\">运行步骤</h2>\n<ul>\n<li>保存为文件**<code>HelloWorld.java</code>**</li>\n</ul>\n<blockquote>\n<p>注意，文件名一定要是<code>HelloWorld.java</code>! 不然会有奇怪的事情发生哦（<a href=\"#public%E7%B1%BB\">Why?</a>）</p>\n</blockquote>\n<ul>\n<li>\n<p>在<strong>该文件目录下</strong>分别运行<code>javac HelloWorld.java</code>和<code>java HelloWorld</code>进行编译和运行</p>\n</li>\n<li>\n<p>也可以直接输入<code>java HelloWorld.java</code>进行运行（Java 11 新增功能，单个文件直接运行）</p>\n</li>\n</ul>\n<h2 id=\"完整输出过程\">完整输出过程</h2>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lkhsss@LKH-PC:&#x2F;mnt&#x2F;d&#x2F;Java$ javac HelloWorld.java\nlkhsss@LKH-PC:&#x2F;mnt&#x2F;d&#x2F;Java$ java HelloWorld\nHello World</code></pre></div></figure>\n<p>或者直接</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lkhsss@LKH-PC:&#x2F;mnt&#x2F;d&#x2F;Java$ java HelloWorld.java\nHello World</code></pre></div></figure>\n<hr>\n<h1>语法解析</h1>\n<h2 id=\"类\">类</h2>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class HelloWorld &#123;&#125;</code></pre></div></figure>\n<p>这玩意儿叫做 java 的类(class)。其中<code>public</code>表示这个类公开，而<code>HelloWorld</code>则为这个类的类名。</p>\n<h3 id=\"public-类\">public 类</h3>\n<p>在 java 程序当中，可以同时出现很多个类，但有且仅有一个类是<code>public</code>并且这个<code>public</code>类的名字<strong>必须和文件名相同</strong>。</p>\n<p>因为每一个 java 程序运行的时候都会先执行 public 这个类（类似于 Python 中的<code>__init__</code>）。</p>\n<h3 id=\"多个类\">多个类</h3>\n<p>也可以多个类，然后相互调用</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class HelloWorld &#123;\n    &#x2F;* 第一个Java程序\n     * 它将输出字符串 Hello World\n     *&#x2F;\n    public static void main(String[] args) &#123;\n        System.out.println(&quot;Hello World&quot;); &#x2F;&#x2F; 输出 Hello World\n        about a&#x3D;new about(); &#x2F;&#x2F;创建一个about类\n        a.sayabout(); &#x2F;&#x2F;调用about类中的sayabout()方法\n\n    &#125;\n&#125;\nclass about &#123;\n    void sayabout() &#123;\n        System.out.println(&quot;现在我正在学习java&quot;);\n    &#125;\n&#125;</code></pre></div></figure>\n<p>输出：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lkhsss@LKH-PC:&#x2F;mnt&#x2F;d&#x2F;Java$ java HelloWorld.java\nHello World\n现在我正在学习java</code></pre></div></figure>\n<h2 id=\"方法\">方法</h2>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;&#125;</code></pre></div></figure>\n<p>这个玩意儿叫做 java 的方法。</p>\n<p>类似于其他编程语言的<strong>函数</strong>。</p>\n<p>将一段可重复运行的代码绑在一起调用，简化代码，提高代码的可读性，可维护性，可重用性，安全性。</p>\n<h3 id=\"修饰符\">修饰符</h3>\n<p>java 方法的首个属性就是<strong>访问修饰符</strong>。</p>\n<p>访问修饰符分为 公有的(public)，默认的(default)，私有的(private)，受保护的(protected) 和 私有的(private)。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">修饰符</th>\n<th style=\"text-align:center\">区别</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">public</td>\n<td style=\"text-align:center\">可以被所有其他类所访问</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">default</td>\n<td style=\"text-align:center\">同一包中的类可以访问，声明时没有加修饰符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">protected</td>\n<td style=\"text-align:center\">自身，子类及同一个包中类可以访问。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">private</td>\n<td style=\"text-align:center\">只能被自己访问和修改</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"输出\">输出</h2>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">System.out.println(&quot;Hello World&quot;);</code></pre></div></figure>\n<p>只是输出一个 Hello World 而已</p>\n",
            "tags": [
                "编程",
                "Java",
                "学习"
            ]
        },
        {
            "id": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Python/%E5%BA%93/python-click%E5%BA%93/",
            "url": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Python/%E5%BA%93/python-click%E5%BA%93/",
            "title": "python-Click库",
            "date_published": "2022-12-10T02:20:24.000Z",
            "content_html": "<h1>Click</h1>\n<p>Click全名<em>Command Line Interface Creation Kit</em>，是一个用于构建命令行的第三方库，相较于Python自带的<a href=\"https://docs.python.org/zh-cn/3/library/argparse.html\">Argparse</a>更加友好和易用。</p>\n<hr>\n<p>官方文档：<a href=\"https://palletsprojects.com/p/click/\">Click | The Pallets Projects</a></p>\n<p>PyPI：<a href=\"https://pypi.org/project/click/\">Click · PyPI</a></p>\n<hr>\n<h2 id=\"安装\">安装</h2>\n<p><code>pip install click</code></p>\n<hr>\n<h2 id=\"用法\">用法</h2>\n<p>引用库<code>import click</code></p>\n<h3 id=\"click-command\">@click.command()</h3>\n<p>使用<code>@click.command()</code>修饰想要构建为命令行命令的函数</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#39;&#39;&#39;\nfilename: test.py\n&#39;&#39;&#39;\nimport click\n\n@click.command()  # 为函数&#96;test()&#96;添加修饰器\ndef test():\n    click.echo(&quot;测试函数，没有什么卵用&quot;)\n\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;:\n    test()</code></pre></div></figure>\n<p>添加后和没有加没有任何不同，因为没有使用<code>@click.option()</code>进行命令行选项的进一步设置</p>\n<p>使用<code>click.echo()</code>是为了更好的终端兼容性</p>\n<h3 id=\"click-option\">@click.option()</h3>\n<p>使用<code>@click.option()</code>增加修饰选项</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#39;&#39;&#39;\nfilename: test.py\n&#39;&#39;&#39;\nimport click\n\n@click.command()  # 为函数&#96;test()&#96;添加修饰器\n@click.option(\n    &quot;-n&quot;,\n    &quot;--name&quot;,\n    prompt&#x3D;&quot;请输入你的名字&quot;,\n    default&#x3D;&quot;无名氏&quot;,\n    help&#x3D;&quot;你的名字。默认值为“无名氏”&quot;,\n    type&#x3D;str,\n) # 设置参数\ndef test(name):\n    click.echo((&quot;你输入的名字为：&#123;&#125;&quot;).format(name)) #输出\n\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;: # 程序入口\n    test()</code></pre></div></figure>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lkhsss@LKH-PC:~$ python test.py -n LKH\n你输入的名字为：LKH\n\nlkhsss@LKH-PC:~$ python test.py\n请输入你的名字 [无名氏]: LKH\n你输入的名字为：LKH</code></pre></div></figure>\n<ul>\n<li>\n<p><code>@click.option()</code>接受一种参数多种名字，上例的<code>-n</code>和<code>--name</code>都指向了一个函数</p>\n</li>\n<li>\n<p>使用<code>prompt</code>指定必须要求输入的参数在没有传入时显示的提示</p>\n<ul>\n<li>\n<blockquote>\n<p>当使用了<code>prompt</code>时，click会认为该参数为必须项，会主动询问参数的值</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>使用<code>help</code>指定该参数的帮助信息</p>\n</li>\n<li>\n<p>使用<code>type</code>指定传入数据的类型</p>\n<ul>\n<li>使用<code>type=click.Choice['A','B']</code>限制该参数只能从A和B中选择</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"菜单选项\">菜单选项</h3>\n<p>配置好参数后，click自动为我们准备了<code>--help</code>选项，其中包含了我们在<code>help</code>中加入的帮助信息</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lkhsss@LKH-PC:~$ python test.py --help\nUsage: test.py [OPTIONS]\n\nOptions:\n  -n, --name TEXT  你的名字。默认值为“无名氏”\n  --help           Show this message and exit.</code></pre></div></figure>\n<hr>\n<h2 id=\"示例\">示例</h2>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#39;&#39;&#39;\nfilename: test.py\nauthor: Lkhsss\n&#39;&#39;&#39;\nimport click\n\n@click.command()  # 为函数&#96;test()&#96;添加修饰器\n@click.option(\n    &quot;-n&quot;,\n    &quot;--name&quot;,\n    prompt&#x3D;&quot;请输入你的名字&quot;,\n    default&#x3D;&quot;无名氏&quot;,\n    help&#x3D;&quot;你的名字，传入参数后将显示在输出中。默认值为“无名氏”&quot;,\n    type&#x3D;str,\n)\n# 选择可以传入&#96;test()&#96;的参数\n# 可以使用多个参数名，输入&quot;-n&quot;，&quot;--name&quot;都会指向&#96;test()&#96;函数\n# 使用default参数设置参数默认值\n# 使用help参数设置帮助菜单\n@click.option(\n    &quot;-c&quot;,\n    &quot;--count&quot;,\n    prompt&#x3D;&quot;请输入循环次数&quot;,\n    default&#x3D;&quot;1&quot;,\n    help&#x3D;&quot;显示名字次数，默认值为1&quot;,\n    type&#x3D;int\n)\ndef test(name, count):\n    for i in range(count):\n        click.echo((&quot;&#123;&#125;，你好。&quot;).format(name))\n    click.echo(&quot;这是一个示例函数，可以输出你在命令行中输入的名字，用来测试click库&quot;)\n\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;:\n    test()</code></pre></div></figure>\n",
            "tags": [
                "编程",
                "Python"
            ]
        },
        {
            "id": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Html/html-%E5%AE%B9%E5%99%A8%E5%85%83%E7%B4%A0/",
            "url": "https://lkhsss.github.io/%E7%BC%96%E7%A8%8B/Html/html-%E5%AE%B9%E5%99%A8%E5%85%83%E7%B4%A0/",
            "title": "HTML-容器元素",
            "date_published": "2022-11-06T03:52:22.000Z",
            "content_html": "<h1>容器元素</h1>\n<p>HTML 学习 - 容器元素</p>\n<span id=\"more\"></span>\n<h2 id=\"div-元素\">div 元素</h2>\n<p>作用：分割网页，达到不同区域实现不同样式，不同功能，应用广泛</p>\n<blockquote>\n<p>注：div 标签没有任何语义</p>\n</blockquote>\n<h2 id=\"其他容器元素\">其他容器元素</h2>\n<p>在 html5 中，为了解决语义化的问题，方便搜索引擎和浏览器识别网页内容，引入了许多有语义的容器标签</p>\n<h3 id=\"header元素\">- <code>header</code>元素</h3>\n<p>通常用于表示页头；有时也可以表示文章的头部。<br>\n例：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;header&gt;&lt;&#x2F;header&gt;</code></pre></div></figure>\n<h3 id=\"footer元素\">- <code>footer</code>元素</h3>\n<p>通常用于表示页脚；有时也可以表示文章的尾部。<br>\n例：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;footer&gt;&lt;&#x2F;footer&gt;</code></pre></div></figure>\n<h3 id=\"article元素\">- <code>article</code>元素</h3>\n<p>通常用于表示整篇文章<br>\n例：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;article&gt;\n  &lt;header&gt;页头&lt;&#x2F;header&gt;\n  &lt;p&gt;正文&lt;&#x2F;p&gt;\n  &lt;footer&gt;页尾&lt;&#x2F;footer&gt;\n&lt;&#x2F;article&gt;</code></pre></div></figure>\n<blockquote>\n<p>注：<code>article</code>, <code>header</code>和<code>footer</code>与<code>div</code>在本质上没有区别，只是它们有语义，方便语义化</p>\n</blockquote>\n<h3 id=\"section元素\">- <code>section</code>元素</h3>\n<p>通常表示文章的章节<br>\n例：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;section&gt;\n  &lt;h2&gt;第一章&lt;&#x2F;h2&gt;\n  &lt;p&gt;第一章内容&lt;&#x2F;p&gt;\n&lt;&#x2F;section&gt;\n\n&lt;section&gt;\n  &lt;h2&gt;第二章&lt;&#x2F;h2&gt;\n  &lt;p&gt;第二章内容&lt;&#x2F;p&gt;\n&lt;&#x2F;section&gt;</code></pre></div></figure>\n<h3 id=\"aside元素\">- <code>aside</code>元素</h3>\n<p>通常表示附加信息<br>\n例：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;aside&gt;\n  &lt;p&gt;侧边栏信息&lt;&#x2F;p&gt;\n&lt;&#x2F;aside&gt;</code></pre></div></figure>\n<h3 id=\"nav元素\">- <code>nav</code>元素</h3>\n<p>导航元素<br>\n例：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;nav&gt;\n  &lt;p&gt;百度&lt;&#x2F;p&gt;\n  &lt;p&gt;谷歌&lt;&#x2F;p&gt;\n  &lt;p&gt;必应&lt;&#x2F;p&gt;\n&lt;&#x2F;nav&gt;</code></pre></div></figure>\n",
            "tags": [
                "编程",
                "Html"
            ]
        }
    ]
}