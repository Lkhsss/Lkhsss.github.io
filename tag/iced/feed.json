{
    "version": "https://jsonfeed.org/version/1",
    "title": "LKHSS的Blog • All posts by \"iced\" tag",
    "description": "嗨嗨嗨",
    "home_page_url": "https://blog.lkhsss.cn",
    "items": [
        {
            "id": "https://blog.lkhsss.cn/%E7%BC%96%E7%A8%8B/Rust/%E4%BC%98%E9%9B%85%E5%9C%B0%E4%B8%BAiced%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0%E5%9B%BE%E6%A0%87/",
            "url": "https://blog.lkhsss.cn/%E7%BC%96%E7%A8%8B/Rust/%E4%BC%98%E9%9B%85%E5%9C%B0%E4%B8%BAiced%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0%E5%9B%BE%E6%A0%87/",
            "title": "优雅地为iced应用程序添加图标",
            "date_published": "2024-08-20T16:15:31.000Z",
            "content_html": "<h1>设置图标</h1>\n<p>图标分为两种。</p>\n<p>一种是显示在应用左上角异界任务栏上的图标。</p>\n<p>一种是系统读取文件时显示的图标（本文方法仅适用于Windows）。</p>\n<p>首先准备好一个符合windows规范的icon文件（本文以<code>icon.ico</code>为例），放在根目录中</p>\n<h2 id=\"在iced中设置应用内和任务栏图标\">在iced中设置应用内和任务栏图标</h2>\n<p>其他人多使用<code>icon::from_rgba()</code>方法，配合<code>image</code>库读取图片来为程序添加图标，但其实iced为大家提供了<code>image</code>feature来直接一步到位。<br>\n使用以下命令启用iced的<code>image</code>feature:</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cargo add iced -F image</code></pre></div></figure>\n<p>然后直接设置一手<code>iced::window::icon::from_file_data()</code>,然后用<code>include_bytes</code>宏直接读取图片数据，然后设置<code>window</code>的设置<code>icon</code>。</p>\n<blockquote>\n<p>图片不能是矢量图(<code>.svg</code>)，但是位图(<code>.png</code>,<code>.jpg</code>,<code>.ico</code>…)应该都可以。<br>\n图片的位置时相对于<code>main.rs</code>文件的。所以当icon文件放在项目根目录时，相对路径应为<code>../icon.png</code><br>\n同时``iced::window::icon<code>还有一个</code>from_file<code>方法，可以动态读取图标。而</code>from_file_data`主要是为了在编译时就硬编码好图标。</p>\n</blockquote>\n<p>设置代码如下：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\">use iced::window::&#123;icon, Icon&#125;;\nfn main() -&gt; iced::Result &#123;\n    App::run(Settings&#123;\n        window:iced::window::Settings&#123;\n    \t\ticon:Some(Icon::from(icon::from_file_data(include_bytes!(&quot;..&#x2F;icon.png&quot;),None).unwrap())),\n    \t\t..Default::default()\n\t\t&#125;,\n\t..Default::default()\n    \t&#125;)\n&#125;</code></pre></div></figure>\n<h2 id=\"设置程序文件图标\">设置程序文件图标</h2>\n<h3 id=\"首先添加编译脚本依赖\">首先添加编译脚本依赖</h3>\n<p>以下是<code>Cargo.toml</code>的内容</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-toml\" data-language=\"toml\"><code class=\"language-toml\">[package]\nbuild &#x3D; &quot;src&#x2F;build.rs&quot;\n[build-dependencies]\nwinres &#x3D; &quot;*&quot;</code></pre></div></figure>\n<p>然后在src文件夹中添加一个叫<code>build.rs</code>文件<br>\n文件内容如下</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\">use winres;\n\nfn main() &#123;\n    let mut res &#x3D; winres::WindowsResource::new();\n    res.set_icon(&quot;icon.ico&quot;);\n    res.compile().unwrap();\n&#125;</code></pre></div></figure>\n<blockquote>\n<p>winres的图片相对路径是项目根目录，所以<code>icon.ico</code>即可。<br>\n还可以在<code>Cargo.toml</code>中使用<code>[package.metadata.winres]</code>来设置应用的信息。具体请看<a href=\"https://learn.microsoft.com/zh-cn/windows/win32/menurc/versioninfo-resource?redirectedfrom=MSDN\">MSDN</a></p>\n</blockquote>\n<h3 id=\"最后一步！\">最后一步！</h3>\n<p>熟悉的构建环节！</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\">cargo build -r</code></pre></div></figure>\n",
            "tags": [
                "Rust",
                "iced"
            ]
        }
    ]
}